import json
import numpy as np
import pandas as pd
from numpy import array
import statistics as s
from typing import Dict, List, Any
from datamodel import OrderDepth, TradingState, Order, ProsperityEncoder, Symbol

logreg_hardcode = {"BANANAS": [{"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [-0.01900268071238014, 0.0, 0.04241026316986762, -0.04338077141285971, 0.10366926004944486, -0.049559315730342154, -0.1946997488846555, -0.05166766471241554, -0.20213457130210088, -0.03345939269255653, 0.1511891000233121, 0.0804641499051502, -0.0018280508928262761, -0.10726136818828129, -0.05146964778293242, -0.05979692454442936, 0.0, 0.0, 0.0, -0.025063267882686983, 0.0, -0.11522350046118754, 0.0, 0.0036689433600159064, 0.0, -0.0514249102448038, 0.0, -0.2914777242740662, 0.0, -0.22417838695736123, 0.0, -0.15099079823897266, -0.019843867029151405, -0.019843867029151405, -0.01984386702898746, 0.0, 0.0027758844428443005, 0.003177365300413071, -0.004759567081274951, -0.17143291093034868, 0.01120415510513217, 0.008921501376609351, 0.00421010398144033, -0.13408449420324894, 0.02281218927184974, 0.02202647693101143, 0.021538718820854924, -0.16027383970914172, 0.027927802691105993, 0.025806078011371077, 0.02511676448801278, -0.006463198591774088, 0.0011140017442478735, -0.0004872015123758422, 0.003721792472516868, -0.04365484929751953, 0.05758559946810825, 0.05821196150045227, 0.05761256541566663, -0.0010911995538812936, -0.02620359051618405, -0.030145261903531933, -0.028490117490959532, 0.10669762933808137, -0.04786848801106836, -0.04786848801106836, -0.04786848801125172, 0.0, 0.00025341515361467995, 0.0013742808186824693, -0.007355633281634205, 0.09514833372034806, 0.007771056611113471, -0.0010269978206853098, 0.0018012457003198923, 0.10929088709497646, 0.02130485069840464, 0.023146885049440142, 0.021539204369712617, 0.09140595721248794, 0.02644079497073484, 0.026611014957028657, 0.02534347708304316, -0.005433839902320219, 0.0015781032815791426, 0.0008995370773535158, 0.003726484823165127, -0.01423198225631651, 0.05717975801838673, 0.05937968993183499, 0.05764656059002563, 0.02327343194125819, -0.025820002487705766, -0.029612658906043067, -0.028491900350443966, 0.10438577475522214, 0.008426139824355352, 0.008426139824355352, 0.008426139824179838, 0.0, 0.0007362000989637943, -0.002747669913643174, -0.0021672865977624494, 0.008136248417086014, 0.017724616478521926, 0.010639776159430106, 0.006616331817748656, 0.1266782377908665, 0.02325214761879355, 0.020911600163468345, 0.02153806476198289, 0.12358331403163365, 0.02663266129889108, 0.027045608320009937, 0.024890276397064433, -0.06489564764517947, 0.002066917325443396, 0.00018919017070993593, 0.0037171271419146, -0.0015979816184504242, 0.05778576153889736, 0.05838195559758023, 0.05757860517899497, -0.02885137986396737, -0.027130198951740424, -0.030204063877796162, -0.028488334045405947, 0.1022253727843012]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [0.044567256444507375, 0.0, -0.0262067947350221, 0.0137070944069806, -0.12380381897571924, -0.026220497803216634, -0.18861357881784738, -0.07989333210648156, -0.18480365892163234, 0.17356598925465228, 0.2750733065763881, -0.06993275451577438, -0.03788859711037827, 0.06618577477321894, -0.05932706505527616, 0.011022847824743418, 0.0, 0.0, 0.0, -0.1650246475054378, 0.0, 0.07497765234742713, 0.0, 0.18254707549632865, 0.0, -0.021588903286781855, 0.0, -0.5396472853564784, 0.0, 0.06494263885866206, 0.0, -0.07248364650930658, -0.027658744457016226, -0.027658744457016226, -0.027658744457446618, 0.0, 0.0018852943564560897, -0.0032757658038738203, -0.002375306691892816, 0.02554174997216921, 0.010223994922667966, 0.00176631387855703, 0.004945647381822379, -0.00017408201033757207, 0.0392662257118428, 0.0300349804213209, 0.03590654205083367, -0.03405586222469249, -0.0004185779882963108, -0.0088442177435472, -0.0021500307805356706, -0.1766122809192655, 0.042146801139857464, 0.04225900000598409, 0.04418847977138452, -0.0040729066930925255, -0.008792716916883058, -0.009212650014124149, -0.0038068274603515265, 0.0289246171536087, -0.045089108874912846, -0.042448647204937316, -0.039509114189333214, 0.10268583895787946, -0.12209185634503089, -0.12209185634503089, -0.12209185634601884, 0.0, -0.002811355943293954, -0.010011342154934594, -0.011859947370094546, 0.0528125619941393, 0.008166090368786435, 0.01019072870355699, 0.004453733852366907, 0.014610652296394001, 0.041193825946030146, 0.04043076926640045, 0.0368699212364137, 0.06899172605336297, -0.0017910072488250392, -0.0015554751670708842, -0.0010734235148403262, -0.23946204912490862, 0.04310737083775134, 0.04106257641386107, 0.04432282010769923, 0.20499865455561714, -0.008781669958934297, -0.006935515187053829, -0.0036628110137159604, 0.1508518549565971, -0.04471774261227633, -0.04157598962856634, -0.039507388733672544, 0.0965603720639535, 0.06701255225364267, 0.06701255225364267, 0.06701255225316112, 0.0, 0.01378494720959863, 0.013889658407539886, 0.007101661670823131, 0.06453355755183611, 0.011392974331629098, 0.006318216176898436, 0.00543758877423921, -0.21665024753653472, 0.03262312463409226, 0.024909714520746522, 0.03494435294387266, 0.2058130989216995, -0.0026134775765388443, -0.010558563863429177, -0.003225603978827698, 0.15217267393256523, 0.04194816723082743, 0.041337763268287794, 0.044054280033318356, -0.21725289698582245, -0.010986979053154275, -0.009876634628885007, -0.003950727544877572, -0.004232901872421371, -0.04545400730583662, -0.042601679355927485, -0.03951083719697255, 0.10436111811877555]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [0.0039447512007422785, 0.0, -0.02502507830160092, 0.04699140786933162, 0.01184369739433939, -0.28119079164467664, -0.2638444458307912, 0.03386852112715906, 0.393472432341036, -0.2536388986534882, 0.29568676195388843, 0.2331070153045545, -0.1573244326306364, 0.17676334627645238, -0.09598546199918354, -0.18223443127195257, 0.0, 0.0, 0.0, 0.006047648904386605, 0.0, 0.20100964217424142, 0.0, 0.14928370618908463, 0.0, -0.3526108119404287, 0.0, -0.6690716389219891, 0.0, -0.06353344439725216, 0.0, -0.16822446314456607, -0.02095321884793572, -0.02095321884793572, -0.020953218848235367, 0.0, 0.0045067023580264995, 0.0006571963333693501, -0.0007289912239180429, 0.05411401385543408, 0.01142716674276361, 7.625991160911601e-06, 0.006711637874463028, 0.029036871926041475, 0.03273213334786124, 0.021789371335203707, 0.025578186286574028, -0.1445566266482793, -0.0014312729434899892, 0.00036287848267775157, -0.0023835559707238983, -0.43301936617989256, 0.0341064900976079, 0.03977169277973667, 0.03647640459355859, -0.018200124318037154, -0.016763357098555018, -0.01488349313325722, -0.013682925754019633, 0.10559633863968979, -0.058117126634130864, -0.059044425122517626, -0.05801598821781656, 0.29130158921212035, -0.07465369661009179, -0.07465369661009179, -0.07465369661056893, 0.0, -0.007112711289079112, -0.0030932911421220916, -0.017893336110454135, -0.02933471455053215, 0.003816631116760013, 0.012933902517136308, 0.0035628571265392114, -0.13194204103323012, 0.028094467403374145, 0.028612631952963513, 0.02646929706484309, 0.08666100223773905, 0.0011907914241633866, 0.013408338090299711, -0.00019646120040851743, -0.05439632673337444, 0.033089854124197765, 0.040320628675991295, 0.036918800653653674, 0.2641824010731583, -0.01716738556443387, -0.012645888265044264, -0.013601476920877419, 0.227740555293912, -0.05755170838246559, -0.05765921638769599, -0.058010952528817696, 0.25908133993973914, 0.03321983990283243, 0.03321983990283243, 0.0332198399031698, 0.0, 0.0054832178092724185, 0.00751764956099402, 0.01642221037430074, -0.10950527360522921, 0.007582968405853174, -0.0061414825723801365, 0.009858363093795307, 0.0030972815821810216, 0.023597469118820186, 0.01709639300520964, 0.024687510552446026, 0.18331028822898046, -0.003975204203681139, -0.0057269771120701946, -0.004568677891534404, 0.000527896005247058, 0.035977009156206864, 0.03716228083789914, 0.03603443302539723, -0.21874654137137736, -0.01834091020426459, -0.0156732240862138, -0.01376433103607277, 0.021682995646596814, -0.059410150921245644, -0.05893970267131935, -0.058021023263883295, 0.3095716518621737]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [0.03513532441196045, 0.0, -0.027060639206530717, -0.07936685099385755, -0.13140775413224087, 0.15110123959904642, 0.038010301755083846, -0.09812681603883389, 0.3077408055705399, -0.11269920714198417, 0.14746915270565902, 0.47198876092976055, -0.04904472986739156, -0.20753455658567466, -0.127705878725065, -0.26582351890090655, 0.0, 0.0, 0.0, 0.046830909643390796, 0.0, 0.010692322029789408, 0.0, -0.35983164405671814, 0.0, 0.268836845865443, 0.0, -0.8401871411059437, 0.0, -0.10503132515212392, 0.0, 0.0057598234333462416, -0.038594381090749405, -0.038594381090749405, -0.03859438109058509, 0.0, -0.007102304690659424, -0.005111670832930712, -0.005101346805951047, -0.019464556947948207, 0.019455459061212002, 0.020039352526077296, 0.0245672158301822, -0.008863869676214352, -0.010678063109919273, -0.011893291463064047, -0.0013963088940099743, -0.19827632987928112, -0.04451160497788467, -0.045637410359725655, -0.04152111497930411, 0.10917987240216226, 0.034884302674795274, 0.03479549593638471, 0.03988959737840279, 0.11947313919078233, 0.07098474177897027, 0.07628101492194309, 0.07390836031970989, -0.013804199874604474, -0.11535038467889464, -0.10649150073280185, -0.11120074212374018, 0.35758191320018484, -0.017808508428306474, -0.017808508428306474, -0.0178085084279303, 0.0, 2.6979731630899125e-05, -0.0037416831337456747, 0.0006671605991198508, -0.009875578930749127, 0.02125390144804803, 0.023017479737371574, 0.02926524121044859, 0.030443836957321408, -0.004933185685569727, 0.0006344233187430749, 0.003767052497138916, 0.1668811743031218, -0.03829682381234126, -0.03844884533813856, -0.040749704877695914, -0.3685561091529008, 0.03331502218044327, 0.036685213640003184, 0.039685023192466966, 0.09520769015167371, 0.07044821480828227, 0.07644574955613016, 0.07389398699852687, -0.02142303566115662, -0.1155348253573322, -0.10613760356386955, -0.1112290405241252, 0.3089730760374443, -0.05884227784577688, -0.05884227784577688, -0.05884227784588906, 0.0, -0.0100693201984439, -0.011073096736930185, -0.010862639154972863, -0.06089072265661418, 0.01962501502039995, 0.009634239941585108, 0.019873965600283806, 0.09157506583479962, -0.004175485469023116, -0.01170317435792692, -0.006554407817065998, -0.010454442897322617, -0.03690987551443819, -0.04784363145248766, -0.04229135133531539, -0.13056020459845769, 0.030152739949957465, 0.0325219711458578, 0.0400940945499091, -0.08901980818916808, 0.07090478058168909, 0.07664411009645343, 0.07392269781471053, 0.03869592898267452, -0.11488709256850639, -0.10594262965399802, -0.11117246900624858, 0.3833740059133004]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [0.025789960787125747, 0.0, -0.06054212059977689, -0.08189851016517796, -0.0036675519870637925, 0.08197166561422495, 0.05131981930001001, -0.07178152568198089, -0.2541661378279923, 0.01979209147355335, -0.22327594435725906, 0.02760431110049637, 0.006362696187776678, -0.04661301261094101, 0.021709270376828, -0.09994635238627816, 0.0, 0.0, 0.0, 0.0669045398632382, 0.0, -0.03506801998040656, 0.0, -0.12654582819366558, 0.0, 0.0035267084854806083, 0.0, 0.2831289121505667, 0.0, 0.020548232833461185, 0.0, -0.04647359006704317, 0.01606268966027266, 0.01606268966027266, 0.01606268965976694, 0.0, 0.008528762136231605, 0.009141734327995995, 0.009114127201351576, -0.03155495464755548, -0.010873422681368148, -0.009744274730548534, -0.01981572483825628, 0.021235588781241307, 0.020267161401017256, 0.02467597732813164, 0.021791353704862276, -0.05637761336869907, 0.030456475031931145, 0.03625604884055377, 0.0303368788317016, -0.0907140118401416, -0.0011265980257548858, -0.002777206507825184, -0.005299205287913261, -0.04431030767710287, 0.004083981062538002, 0.0013919181090899563, -9.221988971050985e-05, 0.0136069841692574, 0.027626046326266022, 0.022326629323798933, 0.023835016414505996, -0.028058002091414555, -0.07166065506210384, -0.07166065506210384, -0.07166065506217444, 0.0, 0.00725159121672069, 0.00425258513805727, 0.002558944428073686, -0.007842797905309208, -0.01638939183006316, -0.016677558084770117, -0.020847372706411106, -0.01916425976093993, 0.01648266987557711, 0.020509126685828556, 0.021834609531417495, 0.12284601858488713, 0.028611233712932366, 0.03271415750816858, 0.02999546048033993, 0.018347648819850636, -0.0010141001265952928, -0.0018094071720495873, -0.0054825679722910635, -0.11502114602999579, 0.0038832801168777855, 0.0016875460266814655, -0.00013803249427131556, -0.008786060670491933, 0.027832011932837065, 0.022209103552710115, 0.023837732329747473, -0.01602014571279901, 0.10362770605510806, 0.10362770605510806, 0.1036277060548204, 0.0, 0.008373192729364223, 0.01729781958368912, 0.015661415136359005, 0.033384574232358966, -0.016858470477462712, -0.0002674477565420484, -0.018784949561267927, 0.015650939900262475, 0.025617483271111623, 0.019845999687165522, 0.02174802670084593, 0.006409032244450073, 0.02893836900957613, 0.03882256285487654, 0.030677859546295892, 0.05565245333814283, -0.0027493454632182123, -0.0011657476714899031, -0.005116013897648689, 0.034200924724738936, 0.0038814987043803632, 0.0017229127856694623, -4.6438169558156874e-05, -0.0046276806787335836, 0.026882472083790993, 0.022303299579131162, 0.023832302320726806, -0.03354881156593711]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [0.03739204299877122, 0.0, -0.06183571800590586, -0.028511700949484856, 0.14413639011722898, 0.11819307661344253, -0.023727117529444054, -0.046010295087670815, -0.05405377138812643, 0.2129576272323147, -0.04227604648134405, -0.3740859835459028, 0.007067870590455334, -0.18552344164748294, 0.028159087267468793, 0.08471452259909547, 0.0, 0.0, 0.0, 0.025391329051484706, 0.0, -0.26434618754625583, 0.0, 0.11756509280126276, 0.0, -0.00011151637554535784, 0.0, 0.08060573974074582, 0.0, -0.1413971885024012, 0.0, -0.12814070571208425, 0.027130611988059588, 0.027130611988059588, 0.027130611988022513, 0.0, 0.011584336617435124, 0.012300947667163878, 0.011274668787370289, -0.09047885752534636, -0.013790171565225329, -0.010931770908649115, -0.009313407384311221, 0.04921338319389687, -0.013109093624000721, -0.0065343973908597325, -0.009652849975565158, -0.2871885153322223, -0.0032541599136135095, 0.00507604779434415, 0.00084535257699654, -0.29552964495652456, 0.03399985917192203, 0.03483340813331288, 0.036036714770642166, -0.03656669732091991, 0.027541745648673767, 0.027171428380964476, 0.021795724440112074, 0.05416433974272087, 0.045151308337940926, 0.04025883211763034, 0.0425078727993377, -0.08007184768464506, -0.024746776880878094, -0.024746776880878094, -0.02474677688017025, 0.0, -0.004761907974060291, -0.013094445530750209, 0.00025446400838314334, 0.07350801829530404, -0.016740175021140162, -0.014038182130341944, -0.010219605498244046, -0.11483206629305898, -0.007717659796101606, -0.012816276514246947, -0.008725415028559277, 0.30333374920879735, -0.004752630534693283, -0.0008259163189630348, 0.001830851108855646, 0.207550116533386, 0.03459408138589168, 0.033397466663340765, 0.036092610432303704, -0.0623948347893335, 0.027319334213142296, 0.025682465118550296, 0.021819161741858457, 0.06242518298485715, 0.04505621888252882, 0.04028605613529113, 0.042509295576629, -0.06957427195286531, 0.07882439859224169, 0.07882439859224169, 0.07882439859285166, 0.0, 0.02301896005534762, 0.021374573019219103, 0.022284715816498248, 0.05752024099967431, -0.002721528096827336, -0.01152374925258519, -0.008408900381120205, 0.17993295990180555, -0.008117136340532431, -0.014773828900483208, -0.010579627873630919, 0.14053109379497652, -0.004631137636344804, 0.0097322522193835, -0.00013942664121174253, 0.06244226755498874, 0.03492078623071093, 0.03725039641050614, 0.035980837776280965, 0.0031709940094521217, 0.026267700477532335, 0.027910062286614964, 0.02177231556577614, 0.008055424986444596, 0.04404642243870673, 0.04043775756242996, 0.04250645758694317, -0.08618049700679468]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [-0.08576246529511755, 0.0, -0.007670942815318295, 0.0036456063386935376, 0.10830013922079078, -0.14653289248997342, -0.04947824943548002, 0.38253677881035647, -0.3504354328882406, -0.18481102035033714, -0.12936498201917004, -0.08730812543074767, 0.026706582115753, -0.43878723626185984, 0.04560246282931732, 0.028258637176455055, 0.0, 0.0, 0.0, 0.09730790312815596, 0.0, -0.08607907568741498, 0.0, 0.011605295910553431, 0.0, -0.0371766128817844, 0.0, -0.42862909775076397, 0.0, -0.16132646213278376, 0.0, -0.06986016043012959, 0.02940181755918525, 0.02940181755918525, 0.02940181755986756, 0.0, -0.00311756609185038, 0.001310146875740924, -0.0029490088978904425, -0.2396792494581674, -0.02340130727556429, -0.012251013508995053, -0.016313924478317202, -0.2417645909230931, 0.0027080281325497753, 0.0035906892504518604, 0.0022350294130540327, -0.10245820756689254, 0.06365255130504717, 0.07068651451918075, 0.06891217131147609, -0.2246715107971741, 0.08538916824173644, 0.08490321345436051, 0.08510895460688137, -0.12757491535601204, 0.03715751569310939, 0.031121646350132256, 0.030643110264481646, 0.05340505474065798, 0.046873711420395085, 0.03973635452714749, 0.04507091846827829, -0.08015693323367098, 0.11824712738352873, 0.11824712738352873, 0.11824712738396063, 0.0, 0.005431892644003887, 0.006885571520565949, 0.008738436829084746, 0.12372029684628948, -0.019745002372683347, -0.008083971829513075, -0.007568888584597386, 0.12365796380424197, -0.0035251767138815083, 0.010821468708558846, 0.0029704432708922545, 0.17639138649135208, 0.060141853670478564, 0.07482498514130383, 0.06996774039547635, -0.27616009239845407, 0.08807637149431202, 0.0867039892459616, 0.08534194734376459, -0.1637670244666859, 0.03857021013340333, 0.03158582993047845, 0.03075527261647172, 0.15895004553900588, 0.046550464070436795, 0.039603019703820574, 0.04505161525558464, -0.07659916282031802, -0.0598426115446934, -0.0598426115446934, -0.05984261154413876, 0.0, -0.001299608177557578, -0.009120698419427718, -0.014624179268446428, 0.07149826985054593, -0.024155485684154935, -0.027796628366120547, -0.025049814535655704, 0.28354730376139736, 0.0073313473566633805, -0.00033676454297032655, 0.0015006218147396318, -0.147242531091807, 0.06576367410888073, 0.0688016910744248, 0.06785758807371017, 0.538594457662698, 0.08682001729649226, 0.08408493915964696, 0.08487613898801405, 0.014828714625693276, 0.033694554340999154, 0.030341629673219583, 0.030531057515492052, -0.09398525862510429, 0.04566183205277695, 0.03904408155998943, 0.0450902108051334, -0.09375853743409863]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [0.012528923865213542, 0.0, 0.0070995870967846516, -0.023118001166598096, 0.12076783734879996, 0.10249483152478567, 0.10496013624300689, -0.03335041865704306, -0.9615603952640916, 0.05201520973734095, -0.10643422671262195, -0.47624739524028886, 0.09063578890304637, -0.3356100187035329, 0.08290226999692012, 0.13165913250713787, 0.0, 0.0, 0.0, -0.007443333283310045, 0.0, -0.14514571198946835, 0.0, 0.11832180061813169, 0.0, -0.09733285255337924, 0.0, -0.015892432659224767, 0.0, -0.3004327193607032, 0.0, 0.041976186281214314, 0.03341226177687443, 0.03341226177687443, 0.033412261775803385, 0.0, 0.0014137579183946818, 0.0020982773396069766, -0.002488006266643389, -0.05296965698545455, 0.0004807477309373431, -0.00953229063918751, -0.013684556037965997, 0.07819825723773033, -0.0027531354722438554, -0.013606998587084489, -0.014183780566003936, 0.03473977140318615, 0.11984057687164086, 0.1241561241073181, 0.12464312125070667, 0.09907273423606823, 0.07074231069804826, 0.06524752136161578, 0.0631519727127406, 0.04374155131833317, 0.045796961032128713, 0.0390506884957233, 0.04464385525113764, 0.056484011896683756, 0.0765894859347641, 0.06746092037201647, 0.07355437567703849, -0.2598719036116773, 0.054689742844464435, 0.054689742844464435, 0.0546897428447949, 0.0, 0.0038487768221227864, 0.006531230555270534, 0.0013158013316428583, -0.0433834076265015, 0.01138191289658051, -0.004940280063593722, -0.011804938114925636, 0.05529883416671091, 0.003409391288195117, 0.008262392974667222, -0.012461327468717, -0.17830252662384202, 0.12050866094796482, 0.12715878805411332, 0.12469493437295046, -0.13689681730719183, 0.07158075559017188, 0.06802387211374018, 0.06318864477671418, -0.2489578616375952, 0.04727030305588307, 0.03882496125286411, 0.044711731257897874, 0.010844698102150899, 0.0761756801298062, 0.0670819824886027, 0.07360254350381079, -0.2185185168023747, 0.011601722784042603, 0.011601722784042603, 0.011601722784759091, 0.0, -0.0021124017183901883, -0.0027804850787216105, -0.006286108423013814, -0.034292281849402986, -0.01161183210752182, -0.007282775245530737, -0.01556117051195469, -0.020902905467979318, -0.019873722037215557, -0.014254124411279682, -0.015904147072874943, 0.016651995599757587, 0.12109054079289826, 0.12681005850582217, 0.12459137182487645, 0.22135586543307878, 0.0756146258014934, 0.06809930262140895, 0.06311536017240033, 0.2703828332837909, 0.04679180118141259, 0.0390899863002976, 0.0445760330852692, 0.026452557478640202, 0.07707111087372191, 0.06713520176352143, 0.07350624554086875, -0.2694352057904861]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [-0.008465216497178638, 0.0, 0.02644705464864277, 0.022935422049052568, -0.09259746472464772, -0.028271892773729688, 0.18729434619321023, -0.04250816987104875, 0.5088274459097921, -0.05401774858577038, -0.12237683210570414, 0.047224006946745785, 0.001403585915549099, 0.5053551935170963, 0.03152496575051906, 0.12492920680828662, 0.0, 0.0, 0.0, 0.011737415501598247, 0.0, 0.06670312449977377, 0.0, 0.003115419364743248, 0.0, 0.04473087577787762, 0.0, 0.6899526363460441, 0.0, 0.17884569858239077, 0.0, 0.139105580563216, -0.0018338322076439525, -0.0018338322076439525, -0.0018338322076326106, 0.0, 0.006393644614148735, 0.005138618149761232, 0.008475867475034388, 0.05135254375194257, 0.006305266099388466, 0.005305526127739368, 0.007226380621846659, 0.017901623065802487, -0.011167659502291514, -0.006179366466070787, -0.009012431563405806, 0.06247361476572547, -0.052912785270551536, -0.054411004104847456, -0.055381272437845776, 0.2496532890598959, -0.07704756020481032, -0.07382710988114867, -0.07670681510763044, 0.04539500287325459, -0.06864103068843327, -0.06293566073545184, -0.0656279774244062, -0.10975577864069082, -0.0011898886380129507, 0.005125802505407163, 0.00015206000031252025, -0.04948966178370625, -0.012489925692368679, -0.012489925692368679, -0.012489925692223245, 0.0, -0.003309952028769005, -0.00042695319086040256, 0.004249768472994845, -0.04463680550084196, 0.006897604797217128, -0.001456313819954168, 0.003727829525373242, 0.015013047452822087, -0.008359765858373154, -0.021474705647462535, -0.011364433301086566, -0.11228843566620879, -0.05242352452803, -0.06499413717644541, -0.056904562481611215, 0.24077030083809117, -0.0782205393422127, -0.07677885113484112, -0.07689348869367567, 0.020960463118498536, -0.06897577017048387, -0.06484109402539794, -0.0657727586716159, -0.19920489648932185, -0.0013429169400333313, 0.004763623944933267, 0.00013141674216394822, -0.06308378224004743, 0.008780434310704126, 0.008780434310704126, 0.008780434310237343, 0.0, 0.013359544368856927, 0.01330812988596898, 0.012697743580389838, -0.017047374372813402, 0.007742000732175032, 0.008050158207645233, 0.010721663469695978, -0.0752611863880398, -0.007311063808475688, -0.004016299542891632, -0.0066627081048940455, -0.04620360913035811, -0.055047635626034666, -0.053616945017999115, -0.05385943283102213, -0.2745209142178384, -0.07716835035339462, -0.0735431249560566, -0.07652034130558737, 0.03748392907680004, -0.06659065646899745, -0.0629684644260911, -0.06548331731166106, 0.012300362300477962, 0.0003023385496512125, 0.005294196104469895, 0.00017268359877730018, -0.046250983900990555]}], "PEARLS": [{"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [0.03363910403546384, 0.0, -0.10877390969792104, 0.08009065084374126, 0.061256447363893934, -0.08505941565499892, 0.16917973358551908, -0.004780490693227992, -0.33104222912587306, -0.03414420316490846, 0.10307518368204885, -0.3455250681628151, -0.10671433775889604, -0.09333231723509641, -0.06953030350126477, 0.03757176418900155, 0.0, 0.0, 0.0, 0.040841577309357176, 0.0, -0.014105088952298225, 0.0, 0.02546059869047723, 0.0, 0.03088577766095484, 0.0, -0.1018343039451644, 0.0, 0.1984297030091284, 0.0, 0.11385648242580296, 0.0032410376282049733, 0.0032410376282049733, 0.0032410376264253027, 0.0, 0.007769950716450906, 0.00778012881533789, 0.008905469240887679, 0.08793531848993409, -0.01174114779233244, -0.016782711977443916, -0.016296029756119, -0.1003373949342833, 0.01689913594905306, 0.013124962507908775, 0.01684716281643738, -0.1750098468554298, 0.016053874954996723, 0.01563665626450588, 0.015470560468136075, -0.08876720572280805, 0.04261496677449894, 0.04260739973276528, 0.04266601276025036, 0.07396516478538483, -0.045488407602075606, -0.04548840747953702, -0.04549420250029429, 0.2041497849989887, -0.03172215900231664, -0.03172215894857953, -0.03171829973044655, 0.06508815602965527, 0.015968176104673753, 0.015968176104673753, 0.015968176097515382, 0.0, -0.005075086094985299, 0.0009152584264679515, 0.0024985680914595106, -0.20936765116860004, -0.011420219045031568, -0.016966163901554532, -0.01659693386525835, 0.16915822182542428, 0.019813817904789997, 0.015756875820432652, 0.017679099062670896, 0.026119329355278845, 0.015542164521140869, 0.015466378483612498, 0.015412859652560593, 0.14165241830864067, 0.042607399885256955, 0.042607399691112706, 0.04270786750139018, 0.08541706834252706, -0.0454884075758405, -0.045488407453234486, -0.04545333770561482, 0.10743732510020393, -0.031722158990799415, -0.031722158937054074, -0.03170100487239267, 0.0729247085165832, -0.010167443041748606, -0.010167443041748606, -0.010167443036786995, 0.0, 0.016107077250649634, 0.015980928905216102, 0.015307327228249804, -0.06198146169133615, -0.016763563003288524, -0.02123901727372429, -0.01599536997825146, -0.009056440798542197, 0.01587996541978265, 0.008832061752379853, 0.01601585253805467, 0.13245230119195053, 0.0154663786572248, 0.015444763291384046, 0.015528210218222954, 0.11148969832983881, 0.04260739996837178, 0.04260739977436702, 0.042624200468039705, -0.27113299301495764, -0.04548840762831949, -0.045488407505796094, -0.045535042788728386, 0.1874263884046995, -0.031722159013822596, -0.031722158960111546, -0.03173558597889385, 0.06024442275730609]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [-0.05859728271961167, 0.0, -0.02950706477174979, -0.12742086801239455, 0.020054942457842687, 0.17604240616085598, -0.10488218039159401, 0.13821214883556301, 0.35472463491587997, -0.1453340038801114, 0.058603268416221585, -0.16690519732310183, 0.08574066218312745, 0.1645258633383738, -0.00892366118212725, 0.16752238988936569, 0.0, 0.0, 0.0, -0.07013852148817216, 0.0, -0.18867946628489396, 0.0, 0.27157567311169095, 0.0, -0.04342926771544476, 0.0, -0.27699149821619934, 0.0, 0.006673194302058189, 0.0, 0.04383814459655548, -0.015281449058692423, -0.015281449058692423, -0.015281449088585185, 0.0, -0.0013683520992041661, 0.003706351338700431, -0.00017753990739805431, -0.15899855845895003, 0.0008246937718352105, -0.007736493983129095, -0.001475246155685621, 0.2288662838721972, 0.004754892702003902, 0.002269991488100812, 0.0037973991554998685, -0.22926049036299112, 0.020271278625736123, 0.020196778252394677, 0.02025659214514171, 0.05153369940616337, 0.03901337329586512, 0.03900209515661131, 0.03902291083903368, 0.058868065839429815, 0.009961678000053443, 0.00996167797321551, 0.00997590071490205, -0.05833103210759588, -0.015862901532138752, -0.01586290150526737, -0.015823736125181842, 0.028318588941522414, 0.01383840297341568, 0.01383840297341568, 0.013838402952636815, 0.0, -0.010141712739718405, -0.012032190344325865, -0.011776910809310696, 0.20646561029372734, 0.0035426779686509556, -0.003667744848337696, -0.005077153340391383, -0.20945975916899798, 0.010738883242782157, 0.004936388601900084, 0.0031081695543489487, 0.056286730651139184, 0.02040962530104298, 0.02032455231196136, 0.020156516341747945, -0.2928274002916997, 0.03900209529619436, 0.03900209511848181, 0.039047369146619645, 0.14425654638989502, 0.009961677994305385, 0.009961677967458933, 0.010003163539999733, -0.26480206953772745, -0.015862901526379293, -0.015862901499504284, -0.01581489320773897, 0.18054843628176823, -0.036126433045103136, -0.036126433045103136, -0.03612643305210748, 0.0, 0.015635559006651877, 0.01620205824046772, 0.011410924410217915, -0.09404632707480003, 0.001951270800985057, -0.0066929728843544666, 0.0021242439098807563, 0.0420083776630322, 0.004915534653990336, 0.0025595332064616673, 0.00448629158293473, -0.055454174344933445, 0.02032455254011077, 0.020442877896650113, 0.020356645580854368, -0.0026167744831147024, 0.03900209537228079, 0.03900209519468837, 0.03899848314392652, -0.27073098334943313, 0.009961678005796275, 0.009961677978969003, 0.009948667533331016, -0.07159545752629802, -0.015862901537892944, -0.01586290151103352, -0.015832572479233007, -0.1686987013537969]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [-0.04423908824688725, 0.0, 0.09216671385973658, -0.15470995108873956, 0.2973758671385432, 0.4596575907392679, -0.21205886872624305, -0.29710874242360735, -0.060462290553776506, 0.09917477297906023, -0.333963600842802, -0.16287534907612497, 0.18267078587509342, -0.4850216246898125, 0.004800590135324981, 0.03323678996048034, 0.0, 0.0, 0.0, -0.18706607983367785, 0.0, -0.15469096407575844, 0.0, 0.18429486947266255, 0.0, -0.012165299796469034, 0.0, 0.3105523135762649, 0.0, -0.12131902127947497, 0.0, 0.052253415593239434, -0.00650599911685594, -0.00650599911685594, -0.006505999166107689, 0.0, 0.0057242032313841815, -0.0006045448533672776, -0.003676816768422807, 0.4523296628146895, -0.007875545618135433, -0.01365468948820517, -0.016897002974637802, 0.1630130523683414, 0.023311867252392676, 0.020141030465463308, 0.022507798079383187, -0.3950702096650735, -0.009596344350025456, -0.009865367661870756, -0.00913146989971892, -0.02767682868653454, 0.10077481352909039, 0.10076834778284852, 0.10081681823267953, -0.09330334622505801, 0.10286785874484936, 0.10286785846773384, 0.10293814637796567, -0.21209660693882854, 0.009857722443523415, 0.00985772242682338, 0.00987698102301758, -0.04575913654508273, -0.01132793267214505, -0.01132793267214505, -0.011327932700507805, 0.0, 0.009329132945659908, 0.0219053806420515, 0.007923042993301242, -0.17602297418262444, -0.0077270690396562544, -0.009168251024501363, -0.0184162653411197, -0.4819818151555518, 0.024489833372623882, 0.022374592049931717, 0.021580061647314314, 0.4125837380088949, -0.009438855210748075, -0.009513500150748944, -0.009036713531618034, 0.03627443100933335, 0.1007683481434925, 0.10076834768433579, 0.1006890715028877, 0.10411136798362543, 0.10286785868551564, 0.10286785840825957, 0.10294163249073253, -0.22577804503324245, 0.009857722439944946, 0.009857722423243457, 0.009871548088698265, 0.0022499445858627475, 0.0009466924427675918, 0.0009466924427675918, 0.0009466924566493591, 0.0, -0.01597268618928365, -0.016517774206091382, -0.015267246902943912, -0.3749047885798208, -0.018214831444017573, -0.014475278200556944, -0.01537790722120089, -0.028797475738890386, 0.022460118698882252, 0.018099187746076027, 0.023434945935837784, 0.08962378706888129, -0.009513500257528442, -0.009595818727492697, -0.009226144071402402, 0.13606419873967612, 0.10076834834006669, 0.10076834788123523, 0.10094448225687737, -0.22233870637979306, 0.10286785880418808, 0.10286785852712284, 0.10293467657122017, -0.31365267172541395, 0.009857722447098274, 0.009857722430409745, 0.009882413836461212, -0.14096688708727265]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [-0.10278751027924123, 0.0, 0.6059873885935773, -0.049528612626947535, -0.5350678586051113, -0.3501006904844726, 0.23870418080031325, 0.35744471477275613, -0.7134572793548053, -0.28034133635841746, -0.11534981307648365, -0.20075607819651184, -0.0016045022897680007, 0.44765859752927367, -0.018912017294502485, 0.030529908723942983, 0.0, 0.0, 0.0, -0.15042374106700343, 0.0, -0.27345384401977596, 0.0, 0.08387197450916278, 0.0, 0.31596618795239767, 0.0, -0.35361709472341113, 0.0, 0.45079286031095933, 0.0, 0.06416753446930167, 0.018550980167057172, 0.018550980167057172, 0.01855098004628016, 0.0, -0.008669183838981593, -0.013172291872834817, -0.008310042648000998, 0.0692171493414869, 0.022626944031711886, 0.02082834811430381, 0.029668339957617973, 0.47554494153080895, -0.03720175851638626, -0.03056069324446533, -0.03133645106283351, -0.0297476297183889, 0.09807644336467088, 0.09818272845213541, 0.09908146537218947, -0.9026925420458642, 0.1426996605459857, 0.14269065461685831, 0.14256731457512395, -0.49473031310466864, 0.033749000150481344, 0.03374900005955668, 0.033776336759262726, -0.4223226733866185, -0.00581479852216503, -0.00581479851231699, -0.005839595387396537, -0.031181142151688213, -0.04983091735185458, -0.04983091735185458, -0.04983091743684949, 0.0, 0.012759073589832382, 0.010348541375334148, 0.01450785413809715, -0.2086883792468337, 0.030503577776447403, 0.0332647431603008, 0.03562113844963144, -0.11246973375459915, -0.03413685482951897, -0.032533905026506195, -0.03018676088727678, 0.2545178804410197, 0.0988915599135107, 0.09884090454826534, 0.0993167879083125, 0.4269901162135709, 0.14269065512752732, 0.1426906544773586, 0.14255255170663225, 0.22119676074739378, 0.03374900013100681, 0.03374900004005515, 0.03378392173219826, -0.13144020109362978, -0.005814798520049535, -0.005814798510200644, -0.005836416688309984, -0.18815107472137757, 0.07708578180522306, 0.07708578180522306, 0.07708578179431148, 0.0, -0.028163035939257546, -0.02684253850416476, -0.031113009512631302, 0.284748532380496, 0.029078796917864885, 0.013695657265958238, 0.023719902253039115, -0.2293065036599696, -0.03247600423708535, -0.02879876876412432, -0.03248539680246799, -0.29310020418687144, 0.09884090565777742, 0.09872889897469994, 0.09884622365978832, 0.20550103638680486, 0.1426906554058923, 0.1426906547561655, 0.1425820476243364, -0.2799522182779132, 0.033749000169938204, 0.033749000079050184, 0.033768762340566104, -0.5127264100885661, -0.005814798524274927, -0.00581479851442432, -0.005842770149974208, 0.09591114406438728]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [-0.02074893779992992, 0.0, -0.01956139064720681, 0.02092045382281097, 0.1676920459168525, 0.06801658241947106, 0.06910097664634225, 0.021832768998855237, -0.3064730271664082, -0.20560789144643887, 0.24279411318008037, -0.21791649533493326, -0.03803239796642396, -0.0997869051258487, 0.008788280020189311, -0.11769254814145995, 0.0, 0.0, 0.0, -0.09708390384433875, 0.0, 0.14779936898879975, 0.0, 0.0010480049170556133, 0.0, 0.22240337530437235, 0.0, -0.276342209438582, 0.0, 0.16053168870074466, 0.0, 0.056898421106183227, -0.010400690025977138, -0.010400690025977138, -0.010400690041509172, 0.0, -0.0037867280870896814, 0.00017109469504793205, -0.0014645084760485792, 0.055599006226673194, -0.003000884642276511, -0.0059658110804991235, -0.002606211610864068, 0.004153141252339315, 0.016492402360830147, 0.015572782776557903, 0.014839096949741115, 0.026605603055344047, 0.02960534486266273, 0.028916720394972548, 0.02920854605989643, -0.0024902390158603295, 0.04508339580764157, 0.04508914965299189, 0.045100091919622436, -0.010364709850343792, -0.04575494461085009, -0.0457549444875934, -0.04575352293493047, 0.11369600704711182, 0.0013928648154941598, 0.0013928648131344811, 0.0013891232118788373, 0.039665125415793735, -0.017975494647064865, -0.017975494647064865, -0.017975494655820715, 0.0, -0.009888551895187775, -0.009445247286814241, -0.007609907310318091, -0.06271256419716326, -0.00180486323162435, -0.004543472475477033, -0.0037033333965130854, -0.052833182603319824, 0.01966479522205701, 0.01504167933231519, 0.01451277270948819, 0.05549272224282214, 0.02908055832592472, 0.029248318277678768, 0.029000341685105294, -0.06549736521955803, 0.045089149814365244, 0.0450891496089136, 0.0450682828027664, -0.05769788273620358, -0.04575494458446132, -0.045754944461135746, -0.04573615238035831, 0.08482453958094152, 0.0013928648149891406, 0.0013928648126291163, 0.0013964330955021083, 0.004979826266443832, 0.001577586134844817, 0.001577586134844817, 0.0015775861264330285, 0.0, 0.004167220907561212, 0.008766253361393828, 0.004677012512424588, -0.001404644181552694, -0.00497928538754985, -0.0038466967564147097, -0.0015096594441770693, -0.22826585334037944, 0.015096575374549646, 0.016677425880205637, 0.015165235008143204, 0.034552227468160834, 0.02924831860599327, 0.029159122425431727, 0.029416632539340112, -0.12112683676776188, 0.04508914990232286, 0.04508914969701729, 0.04513188886180746, -0.09536332412500279, -0.045754944637247275, -0.04575494451400667, -0.04577088723968071, 0.1589629681271932, 0.001392864815999016, 0.0013928648136414426, 0.0013818176260456177, 0.05729557426627994]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [-0.13009706313671968, 0.0, 0.1286832495484708, 0.030197848547965218, 0.021830915301398236, 0.03713175597101898, -0.13191465988014334, -0.03921743084002052, 0.30204682080566553, -0.04084587911096679, 0.08881140007332146, -0.0458909975141345, -0.08065803136359312, -0.08804729027533996, -0.053294052958550685, -0.004196044074635036, 0.0, 0.0, 0.0, -0.05312117673513207, 0.0, 0.1920315102433816, 0.0, -0.07445966038561182, 0.0, -0.08844848153205176, 0.0, 0.14643127852766813, 0.0, -0.11501993395368378, 0.0, 0.1255103319127881, -0.021281455196854464, -0.021281455196854464, -0.021281455214769398, 0.0, -0.0021219378040371003, -0.00035837781081492025, -0.0021559060691595253, -0.040621059173424415, -6.753286771321052e-05, -0.010247380032938406, -0.005185877113813585, -0.3089376702019518, 0.03217332770949643, 0.03196946548240373, 0.03218701993376711, -0.23797350910421844, -0.04633178628591043, -0.04562505648162886, -0.04638178883834799, 0.2540919933351981, -0.010468398222204089, -0.010440862706360776, -0.010369830854349874, 0.15212396593197136, 0.030124482183832485, 0.030124482102678953, 0.030050528046648924, 0.0954124752988302, -0.027779969589050185, -0.027779969541991915, -0.0277916587429856, 0.08303165510860964, 0.00765542971471388, 0.00765542971471388, 0.007655429695342584, 0.0, 0.0017067662639223343, -0.00039869197541703995, 0.0035861269813044026, -0.08904531550850699, 0.009187829396711054, -0.0035042353992782355, -0.003901305433099179, 0.21382226770577145, 0.03115503381958803, 0.032230806637019424, 0.032614970752098155, 0.29999591443521967, -0.04630160926703697, -0.046376412420279164, -0.046166120440146785, -0.059352210628303294, -0.010440862743736215, -0.010440862696156362, -0.010261023158304051, -0.17502962922050583, 0.03012448216645594, 0.03012448208526274, 0.03007540086080894, -0.28899346784259655, -0.027779969578963698, -0.02777996953189913, -0.02778044306075134, 0.02680040477292977, -0.04027791138475094, -0.04027791138475094, -0.040277911376074164, 0.0, -0.002687038785489773, 0.000903864011472385, -0.007891573182638938, -0.07483189898752592, -0.00027853535640319944, -0.021369364974460868, -0.006469310711907136, 0.5051736803135504, 0.032333300938781534, 0.026836435654541354, 0.03175941890398027, -0.09931284349905035, -0.04637641294084783, -0.04649020499531466, -0.04659727605591361, 0.0932357683887506, -0.010440862764097633, -0.010440862716561508, -0.010478544317250902, -0.06274493790169257, 0.03012448220120812, 0.03012448212007189, 0.030025678045503306, 0.2706061983519743, -0.027779969599127496, -0.027779969552089927, -0.02780286824489343, 0.0811141126920906]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [-0.011482023233175695, 0.0, -0.10379687418118955, -0.07075785813146332, -0.18704324813474554, -0.35775158714288274, 0.22327065869208854, 0.12468700540547957, -0.049866145622050634, 0.011890471378797089, -0.28400973394410006, 0.545571986086677, 0.06873642602159469, -0.29272128870277436, 0.0074811718318878685, 0.0025953094554669706, 0.0, 0.0, 0.0, 0.052702142366482435, 0.0, -0.10612325877801337, 0.0, -0.21091226852734501, 0.0, 0.047532390311467186, 0.0, 0.049196834658881756, 0.0, -0.11238732887977469, 0.0, -0.05961955923110159, 0.0005697462919459483, 0.0005697462919459483, 0.0005697462537023434, 0.0, 0.014642285839808315, 0.011592137516904943, 0.0031732194131918745, 0.32435242500550765, 0.012915426321519131, 0.009127281296350348, 0.0011837214535500196, 0.11350188072866008, -0.02342389281714088, -0.03208952413600478, -0.02367952684783403, -0.1506431509287456, -0.0036604222155246797, -0.0033267220282129305, -0.0036811611748152344, 0.030608693607273765, 0.015528506829583373, 0.015521000568922852, 0.015210868727696017, -0.21982761741289233, 0.01549266484111857, 0.015492664799380794, 0.015412923086413509, 0.10540293691146603, -0.001157620969842701, -0.0011576209678824004, -0.0011859465754916556, -0.010407090984711242, -0.03155878375828162, -0.03155878375828162, -0.0315587837875537, 0.0, 0.015456961321121235, 0.02895813099135644, 0.006458034787635574, -0.26556579270244723, 0.01916165096603151, 0.012840644402030105, 0.0009478583740778977, -0.22514855433089986, -0.01763665741257285, -0.0224587876431096, -0.024088002048980716, 0.2050527037204413, -0.003178190240251847, -0.0032394916379029203, -0.003903236675979922, 0.2160874633755653, 0.015521000624462922, 0.01552100055374568, 0.015135984215548718, -0.36687551191270673, 0.015492664832180085, 0.015492664790426667, 0.015354053489724469, -0.011697483481225526, -0.001157620969420983, -0.0011576209674607372, -0.001195754433373021, -0.0156314496742253, 0.03242251698833486, 0.03242251698833486, 0.0324225169837839, 0.0, 0.003396056372993082, 0.001309550601958755, -0.00010857847412695959, -0.27672622977741684, 0.007144746514526215, 0.008845481413359786, 0.0014200741594196393, 0.06341047384463265, -0.022342262685369183, -0.0368616609995805, -0.02327107437181282, 0.07502292586191386, -0.0032394916742577947, -0.003337429477387893, -0.0034592264393198627, -0.15076755096049801, 0.015521000654746977, 0.015521000584069874, 0.015285707714452059, 0.07527099091504805, 0.015492664850052141, 0.015492664808327585, 0.0154717521131976, 0.1705913873571063, -0.0011576209702624947, -0.001157620968300084, -0.0011761463430327668, 0.03068919251449181]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [-0.06131222901313659, 0.0, -0.12640508082398136, 0.06541809710412551, -0.10079956296907136, 0.23300511059400492, 0.35782378473518056, -0.32585160407499947, -0.09179403304657203, -0.00974522468184178, -0.4341452488422306, 0.17712533595946814, -0.22727487237210456, 0.4688447862228558, 0.024836316891099348, 0.03944161515493961, 0.0, 0.0, 0.0, 0.0554706597520785, 0.0, 0.1219146388040868, 0.0, -0.029703689526113564, 0.0, -0.4893972397908966, 0.0, -0.029744207391827513, 0.0, 0.2173572906495787, 0.0, -0.03998884865260428, -0.02233474796951139, -0.02233474796951139, -0.022334748096080326, 0.0, 0.0007097614202053341, 0.0004175978556582385, 0.00132861047270663, 0.06729869290948205, 0.005905778297487942, -0.008327426576961294, 0.005973918216154069, 0.11822116621796018, -0.02434406906043186, -0.019169056082331992, -0.016539187529311217, -0.2565599470861684, -0.0027496459513625944, -0.003375106303081814, -0.0026847748471832632, 0.34399260981093577, -0.07712873217133463, -0.07714035082703286, -0.07713052855900829, 0.48930609700647426, -0.18045027245560102, -0.1804502719695018, -0.18036808817534739, 0.5380905053544319, 0.022815212514440325, 0.022815212475790048, 0.022833226125232163, -0.0014439145073028808, -0.09416661857770602, -0.09416661857770602, -0.094166618666521, 0.0, -0.010038103891209016, -0.011514758719989407, -0.02311797088362092, 0.16918275639309777, 0.010082889741710616, -0.00028517845145585157, -0.00026881946600469913, -0.18736760737635155, -0.02816905772702515, -0.019303577961715286, -0.018198868678662293, 0.214284409450799, -0.0026350862129493665, -0.0027390194692171496, -0.0031379660296895428, -0.013790642135632265, -0.07714035110315393, -0.07714035075163556, -0.07711730071382679, -0.17704990290522646, -0.1804502723515337, -0.18045027186515158, -0.18030961152910246, 0.5840531792887771, 0.02281521250616089, 0.022815212467505033, 0.022834992109058278, 0.17333426522859058, 0.05928111120873377, 0.05928111120873377, 0.059281111182848324, 0.0, 0.011916686521190073, 0.014760444339956883, 0.02576129172092459, -0.05166341512410133, -0.0011218436116147328, -0.012979645855162375, 0.012212911776450692, 0.14833878601542808, -0.019280623320288664, -0.01500728590510103, -0.01488074240153674, -0.1465969903932129, -0.002739019499936698, -0.002826866403189267, -0.002231893214296513, 0.37184372512070335, -0.07714035125360673, -0.0771403509023841, -0.07714374707274561, 0.7186505974765256, -0.18045027255971444, -0.18045027207366274, -0.18042654235941968, 0.33682151366714175, 0.022815212522715105, 0.022815212484090477, 0.02283145808560917, -0.06949369954060952]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": False, "verbose": False, "weights": [-0.01266104413487621, 0.0, 0.043847887539782825, 0.010080298407325617, -0.06228892887063336, -0.07410637373175863, -0.05389103928130657, 0.002077181763127, 0.15024618906963394, 0.06365364518669049, -0.04208352043645422, 0.15900464046796886, 0.03146804340941801, 0.09046649117218881, 0.03085595323031501, -0.010054319896150476, 0.0, 0.0, 0.0, 0.024319589691737455, 0.0, -0.028634065636688757, 0.0, -0.029894557323782375, 0.0, -0.11714518248120118, 0.0, 0.09092995382943564, 0.0, -0.07929022761468939, 0.0, -0.08280169422473471, 0.007490786020923485, 0.007490786020923485, 0.007490786022657792, 0.0, -0.010742624155018646, -0.012658535943156737, -0.009332749863335052, -0.08577990205918505, 0.0083717101963221, 0.012091135069759833, 0.01145619858066278, -0.07140986807820646, -0.007177677975900708, -0.006538503715200338, -0.007282374810694173, 0.13445371623524743, -0.005465028693741859, -0.005179822074839292, -0.005056403962990831, 0.04761703902705468, -0.04039981422376891, -0.040402108051720946, -0.04039508614463208, -0.0004109982658061697, 0.023040826760027246, 0.02304082669795901, 0.02304854145257189, -0.11774609048652185, 0.017834598400668252, 0.017834598370457602, 0.017830984437680254, -0.04170083479300402, -0.006160630657834847, -0.006160630657834847, -0.006160630657325015, 0.0, -0.004433577516220577, -0.010204142311788041, -0.007881685372864825, 0.12013379772770717, 0.00643334344533384, 0.01054804201852643, 0.012077821532098994, 0.03622246993285805, -0.009598912347179463, -0.007316952977589441, -0.0074197713251014765, -0.08144559324285355, -0.0051173629249773355, -0.005094590436308906, -0.004998111891567882, -0.05337340620506822, -0.04040210819632177, -0.040402108012224866, -0.0403933852219519, 0.04909489881066077, 0.023040826746738827, 0.023040826684636168, 0.023025609554494855, 0.006906660762737967, 0.017834598394194177, 0.017834598363978944, 0.01782143861579471, -0.05719070040640324, 0.017202224615475287, 0.017202224615475287, 0.017202224613442695, 0.0, -0.01440307871975317, -0.016966933059236827, -0.010782139765197863, 0.08347393065547054, 0.011274723993948842, 0.012291578741346818, 0.010834822110568803, 0.04307261639634811, -0.007387413182277157, -0.005275891441756811, -0.007145143787847476, -0.024746864919448282, -0.005094590493496268, -0.0050344915473789454, -0.005114664954594148, -0.006627189727200078, -0.04040210827513378, -0.04040210809117124, -0.0403967967278489, 0.1272529902525798, 0.023040826773320023, 0.023040826711259704, 0.023071457872104392, -0.1332064222713826, 0.017834598407138087, 0.017834598376941336, 0.01784052522391822, -0.014912523614273405]}]}

stats = {"BANANAS": [[27.098443177651102, 0.0, 26.82244125516597, 3.959249052847069, 26.71425676795859, 4.179584491445785, 26.43290367886696, 4.18769907950871, 25.089757886382557, 3.986131943883173, 18.398963501576954, 2.9283186640228696, 0.0, 0.0, 0.0, 3.9353856807481526, 0.0, 4.163691602197051, 0.0, 4.172203867555106, 0.0, 3.967169962998595, 0.0, 2.9101000646191317, 4929.880588058806, 0.0, 4927.909734043068, 1.0926040829565276, 4918.055361474936, 1.3715283972764902, 4868.783571334973, 1.9946223733205812, 4622.468465835154, 3.6084657068946844, 3390.3130276897605, 5.026210713897992, 4927.23402340234, 4927.23402340234, 4927.23402340234, 0.0, 4927.20202020202, 4924.236423642365, 4925.264030866795, 1.2901161983738436, 4920.049038237157, 4913.4928159482615, 4915.415122223676, 1.6738007689558474, 4872.969530286362, 4862.392605927259, 4866.170484751224, 2.2332601862305426, 4630.668400173351, 4612.377637763776, 4619.988099389234, 3.742806447268481, 3402.264159749308, 3377.2258892555924, 3388.496152889528, 5.073495538605481, 4932.527152715272, 4932.527152715272, 4932.527152715272, 0.0, 4931.591092442578, 4928.672200553388, 4930.555290167163, 1.2563917306350076, 4922.6297629762985, 4916.165049838317, 4920.6954246205305, 1.613061722883115, 4875.195786245291, 4864.480381371471, 4871.396477684106, 2.189590548466698, 4632.693436010268, 4614.28592859286, 4624.948660014363, 3.7180956342419904, 3403.765409874321, 3378.6663666366635, 3392.1297754109123, 5.0727603830563135], [4.2581951825606845, 0.01, 1.987054783320117, 1.5358342325284375, 1.5823404264528869, 0.71994828791937, 2.9951293687316625, 0.5643676662245442, 6.484512641121284, 1.0452595079942522, 12.412698538312625, 1.9843491467447034, 0.01, 0.01, 0.01, 1.5514549810559988, 0.01, 0.7351688376823985, 0.01, 0.5678168873883395, 0.01, 1.0412586728311888, 0.01, 1.9720967197486399, 12.067485080255521, 0.01, 99.38312809548934, 0.5471894285495705, 241.5669876222313, 0.3128321626170814, 545.7302259467614, 0.5864218997366158, 1192.617797818775, 1.6233563030182523, 2285.4006566170406, 3.679372362717628, 12.104245255358578, 12.104245255358578, 12.104245255358528, 0.01, 99.38929727485105, 99.30849714927042, 99.33046518294422, 0.9196091978577833, 241.66821802013965, 241.34221574872208, 241.43727040578696, 0.4291774055699606, 546.2021796849849, 545.0135903861524, 545.4372984247551, 0.568080570399566, 1194.735825899166, 1190.0155428233727, 1191.9778444697097, 1.60768203312033, 2293.461747102278, 2276.5800403768376, 2284.1759140631143, 3.705957479738693, 12.113115278060732, 12.113115278060732, 12.113115278060945, 0.01, 99.45679501471652, 99.41697905620661, 99.4376054251212, 0.8505152117614706, 241.79287172621034, 241.47785116822055, 241.6968436629913, 0.42775337775915173, 546.4514499262553, 545.2477594256451, 546.0231462306646, 0.5758961411507456, 1195.2581264229655, 1190.5077546936018, 1193.2577077733795, 1.6166784046807035, 2294.4743673321445, 2277.5510333819907, 2286.625313568088, 3.7058670470099853]], "PEARLS": [[26.839317265059837, 0.0, 26.46950540996659, 4.136236795081323, 26.329924857883302, 4.431086172902625, 26.04395013146023, 4.469654914503827, 24.719221094979485, 4.26126029696513, 18.126463648388764, 3.1275604078299004, 0.0, 0.0, 0.0, 4.176483989290645, 0.0, 4.483362191583157, 0.0, 4.521826550495049, 0.0, 4.315824743147378, 0.0, 3.1738860217375273, 9999.996549654965, 0.0, 9995.996013528376, 1.3513887145399266, 9975.993622823431, 1.4703593138346447, 9875.982613974678, 1.4740703153383785, 9375.930172409602, 1.4029484277959974, 6875.680637619963, 1.0308626966339791, 9996.609694302764, 9996.609694302764, 9996.609694302766, 0.0, 9995.068306830683, 9991.224755808913, 9992.610456760334, 1.6626086922215755, 9977.614361436144, 9971.010301030103, 9972.615031071415, 1.8837223598570565, 9877.962796279628, 9871.049604960495, 9872.637727659147, 1.9046599208963648, 9377.812781278128, 9371.249624962496, 9372.754891942008, 1.811801177123394, 6877.062706270627, 6872.2497249724975, 6873.354137430812, 1.3283708509862293, 10003.383405007167, 10003.383405007167, 10003.383405007167, 0.0, 10000.768876887689, 9996.95109510951, 9999.381447302441, 1.6569672916302665, 9980.984998499851, 9974.37703770377, 9979.37206742711, 1.894213212056494, 9880.925592559255, 9874.012401240125, 9879.327349575162, 1.9178609612535074, 9380.625562556255, 9374.062406240624, 9379.105308786942, 1.8313440609877085, 6879.125412541255, 6874.312431243125, 6878.007031936832, 1.3477489874939206], [4.557019998068902, 0.01, 2.3684264394703027, 1.8688708205564835, 1.6967396876157954, 0.9821376145440909, 2.970094835912565, 0.6831480501494854, 6.390538268654857, 1.1229908392787042, 12.229049229423927, 2.118635779587605, 0.01, 0.01, 0.01, 1.9157967456798712, 0.01, 0.9814486034641773, 0.01, 0.6859618605062221, 0.01, 1.1417598097368902, 0.01, 2.1507058051810026, 1.5065586596260963, 0.01, 199.98104575654295, 0.6494535167168468, 489.3440237487498, 0.27742782191976445, 1106.6913986269512, 0.20965160287530762, 2418.927302440969, 0.374839214739581, 4634.851187642865, 0.7051411752311886, 1.9475876877716498, 1.9475876877716498, 1.9475876877707334, 0.01, 199.97555327728492, 199.8849154349123, 199.91402700280287, 1.0143860102731044, 489.4246141076858, 489.09949431239966, 489.1783608561453, 0.4525953016861413, 1106.9132856147814, 1106.1386082499027, 1106.3165828339334, 0.2893356666494697, 2419.413000254044, 2417.719756802616, 2418.1081049864383, 0.4829646656823911, 4635.782829005719, 4632.538436902796, 4633.282912533267, 0.9058228977404997, 1.959357921390365, 1.959357921390365, 1.9593579213877368, 0.01, 200.0758569278055, 200.01338073735292, 200.0495973410832, 1.0230599303061834, 489.58876456357916, 489.2657960243955, 489.50980754435415, 0.45679024994488343, 1107.2452901994347, 1106.4706128349692, 1107.0662088910537, 0.29234106084259787, 2420.1386760194328, 2418.445432567299, 2419.7464636398786, 0.48824105009175783, 4637.173282763032, 4633.928890659896, 4636.419391467719, 0.9188137004600533]]}

def serialize_logreg(model):
    # self.learning_rate = learning_rate  # learning_rate of the algorithm
    # self.num_iter = num_iter  #  number of iterations of the gradient descent
    # self.fit_intercept = fit_intercept  # boolean indicating whether we`re adding base X0 feature vector or not
    # self.verbose = verbose 
    # self._weights
    serialized_model = {
        'learning_rate':model.learning_rate,
        'num_iter':model.num_iter,
        'fit_intercept':model.fit_intercept,
        'verbose':model.verbose,
        'weights':model._weights.tolist()
    }
    return serialized_model

def deserialize_logreg(model_dict):
    deserialized_model = LogisticRegression()
    deserialized_model.learning_rate = model_dict['learning_rate']
    deserialized_model.num_iter = model_dict['num_iter']
    deserialized_model.fit_intercept = model_dict['fit_intercept']
    deserialized_model.verbose = model_dict['verbose']
    deserialized_model._weights = np.array(model_dict['weights'])
    return deserialized_model

class LogisticRegression:
    def __init__(self, learning_rate=0.01, num_iter=100, fit_intercept=False, verbose=False):
        self.learning_rate = learning_rate  # learning_rate of the algorithm
        self.num_iter = num_iter  #  number of iterations of the gradient descent
        self.fit_intercept = fit_intercept  # boolean indicating whether we`re adding base X0 feature vector or not
        self.verbose = verbose 
        self.firsttime = True 

    def _add_intercept(self, X):
        intercept = np.ones((X.shape[0], 1))  #  creating X0 features vector(M x 1)
        return np.concatenate((intercept, X), axis=1)  # concatenating X0 features vector with our features making intercept

    def _sigmoid(self, z):
        '''Defines our "logit" function based on which we make predictions
           parameters:
              z - product of the out features with weights
           return:
              probability of the attachment to class
        '''

        return 1 / (1 + np.exp(-z))

    def _loss(self, h, y):
        '''
        Functions have parameters or weights and we want to find the best values for them.
        To start we pick random values and we need a way to measure how well the algorithm performs using those random weights.
        That measure is computed using the loss function
        '''

        return (-y * np.log(h) - (1 - y) * np.log(1 - h)).mean()

    def get_params(self):
        return self._weights
    
    def load_params(self, params):
        self._weights = params

    def train(self, X, y):
        '''
        Function for training the algorithm.
            parameters:
              X - input data matrix (all our features without target variable)
              y - target variable vector (1/0)
            
            return:
              None
        '''

        if type(X) == pd.DataFrame:
            X = np.asarray(X)

        if self.fit_intercept:
            X = self._add_intercept(X)  # X will get a result with "zero" feature

        if self.firsttime:
            self._weights = np.zeros(X.shape[1])  #  inicializing our weights vector filled with zeros
            self.firsttime = False

        for i in range(self.num_iter):  # implementing Gradient Descent algorithm
            z = np.dot(X, self._weights)  #  calculate the product of the weights and predictor matrix
            h = self._sigmoid(z)
            gradient = np.dot(X.T, (h - y)) / y.size
            self._weights -= self.learning_rate * gradient
            
            if (self.verbose == True and i % 10000 == 0):
                z = np.dot(X, self._weights)
                h = self._sigmoid(z)
                print(f'loss: {self._loss(h, y)} \t')

    def predict_prob(self, X):
        if type(X) == pd.DataFrame:
            X = np.asarray(X)

        if self.fit_intercept:
            X = self._add_intercept(X)
    
        return self._sigmoid(np.dot(X, self._weights))
    
    def predict(self, X, threshold=0.5):
        if type(X) == pd.DataFrame:
            X = np.asarray(X)

        return self.predict_prob(X) >= threshold
    
    def eval(self, X, y):
        """"Evaluate accuracy on dataset."""
        p = self.predict(X)
        return np.sum(p == y) / X.shape[0]
    
class Indicator:
    def __init__(self, windows, product):
        self.obnames = [
            # 'bid_means',
            # 'ask_means',
            'bid_volumes',
            'ask_volumes',
            'mid_prices',
            # 'volume_diffs',
            'best_bids',
            'best_asks'
        ]
        self.product = product
        self.mw = max(windows)
        self.windows = windows
        self.curr_len = 0
        self.cache = {
            name:[] for name in self.obnames
        }

    def add_newstate(self, d):
        bids = []
        buytotal = 0
        buyvolume = 0
        for p, v in d.order_depths[self.product].buy_orders.items():
            if not np.isnan(p):
                bids.append(p)
                buytotal += p*v
                buyvolume += v
        asks = []
        selltotal = 0
        sellvolume = 0
        for p, v in d.order_depths[self.product].sell_orders.items():
            if not np.isnan(p):
                asks.append(p)
                selltotal += p*v
                sellvolume += v
        
        # code to get mid price since was available in order book of 
        # train but not when executing
        best_bid, best_ask = 0, 0
        if len(d.order_depths[self.product].buy_orders) > 0:
            best_bid = max(d.order_depths[self.product].buy_orders.keys())
        if len(d.order_depths[self.product].sell_orders) > 0:
            best_ask = min(d.order_depths[self.product].sell_orders.keys())

        if best_bid == 0:
            mid_price = best_ask
        elif best_ask == 0:
            mid_price = best_bid
        else:
            mid_price = best_bid + (best_ask-best_bid) / 2

        self.curr_len += 1
        # self.cache['bid_means'].append(buytotal/buyvolume)
        # self.cache['ask_means'].append(selltotal/sellvolume)
        self.cache['bid_volumes'].append(buyvolume)
        self.cache['ask_volumes'].append(sellvolume)
        self.cache['mid_prices'].append(mid_price)
        # self.cache['volume_diffs'].append(buyvolume-sellvolume)
        self.cache['best_bids'].append(max(bids))
        self.cache['best_asks'].append(min(asks))

        if self.curr_len > self.mw:
            self.curr_len -= 1
            # self.cache['bid_means'].pop(0)
            # self.cache['ask_means'].pop(0)
            self.cache['bid_volumes'].pop(0)
            self.cache['ask_volumes'].pop(0)
            self.cache['mid_prices'].pop(0)
            # self.cache['volume_diffs'].pop(0)
            self.cache['best_bids'].pop(0)
            self.cache['best_asks'].pop(0)
    
    def indicator(self, key):
        ret = []
        for wi in self.windows:
            wind = []
            if 'volumes' not in key:
                curr = [0,0,0,0]
            else:
                curr = [0,0]
            if self.curr_len >= wi:
                ds = self.cache[key][-wi:]
                if 'volumes' not in key:
                    try:
                        wind.append(max(ds))
                    except:
                        wind.append(0)
                    try:
                        wind.append(min(ds))
                    except:
                        wind.append(0)
                # try:
                #     wind.append(s.fmean(ds))
                # except:
                #     wind.append(0)
                try:
                    wind.append(s.geometric_mean(ds))
                except:
                    wind.append(0)
                try:
                    wind.append(s.stdev(ds))
                except:
                    wind.append(0)
                curr = wind
            ret.extend(curr)
        return ret
    
    def compute_single(self, states):
        ret = []
        self.add_newstate(states[-1])
        for ob in self.obnames:
            ret.extend(self.indicator(ob))
        return ret

class Logger:
    def __init__(self) -> None:
        self.logs = ""

    def print(self, *objects: Any, sep: str = " ", end: str = "\n") -> None:
        self.logs += sep.join(map(str, objects)) + end

    def flush(self, state: TradingState, orders: Dict[Symbol, List[Order]]) -> None:
        print(json.dumps({
            "state": state,
            "orders": orders,
            "logs": self.logs,
        }, cls=ProsperityEncoder, separators=(",", ":"), sort_keys=True))

        self.logs = ""

class Trader:
    def __init__(self):
        self.logger = Logger()
        self.states = []
        self.products = ["BANANAS", "PEARLS"]
        self.windows = [3**i for i in range(8)]
        self.logregs = {}
        self.indicators = {}
        self.inventory = {}
        self.pos_limit = 20

        for product in self.products:
            self.inventory[product] = {
                "position":0,
                "lifo":[]
            }
            self.indicators[product] = Indicator(self.windows, product)
            self.logregs[product] = [
                deserialize_logreg(model_dict) for model_dict in logreg_hardcode[product]
            ]
        
    def run(self, state: TradingState) -> Dict[str, List[Order]]:
        """
        Only method required. It takes all buy and sell orders for all symbols as an input,
        and outputs a list of orders to be sent
        """
        # Initialize the method output dict as an empty dict
        result = {}
        self.states.append(state)

        # Iterate over all the keys (the available products) contained in the order depths
        for product in self.products:
            x = np.array(self.indicators[product].compute_single(self.states))
            x = (x - stats[product][0])/stats[product][1]
            order_depth = state.order_depths[product]
            preds = [clf.predict(x) for clf in self.logregs[product]]
            orders = []
            
            position = self.inventory[product]['position']
            lifo = self.inventory[product]['lifo']
            # Unravel the position if possible
            if position != 0:
                positive = position > 0
                sorted(lifo)
                if not positive:
                    sorted(lifo, reverse=True)
                unravel = order_depth.buy_orders if positive else order_depth.sell_orders
                for p, v in enumerate(unravel):
                    vol = 0
                    if position == 0 or len(lifo) == 0:
                        break
                    for _ in range(v):
                        if position == 0 or len(lifo) == 0:
                            break
                        if lifo[0] < p and positive:
                            vol -= 1
                            lifo.pop(0)
                            position -= 1
                            if position == 0 or len(lifo) == 0:
                                break
                        if lifo[0] > p and not positive:
                            vol += 1
                            lifo.pop(0)
                            position += 1
                            if position == 0 or len(lifo) == 0:
                                break
                    if vol != 0:
                        orders.append(Order(product, p, vol))

            # Save the new positions and prices
            self.inventory[product]['position'] = position
            self.inventory[product]['lifo'] = lifo

            # Buy a new position if needed
            neutral = True if preds[8] == 1 else False
            buy_signal = np.sum(preds[:4])
            short_signal = np.sum(preds[4:8])
            trade = buy_signal - short_signal

            # Can only buy if position is buy already
            if trade > 0 and position >= 0:
                # The best ask to buy
                best_ask = min(order_depth.sell_orders.keys())

                # Compute the allowed volume
                vol = max(trade - (2 if neutral else 0), 0)
                best_ask_volume = order_depth.sell_orders[best_ask]
                actual_vol = min(vol, -best_ask_volume)
                actual_vol = min(self.pos_limit - position, actual_vol)

                if actual_vol != 0:
                    # Create the order and store the values
                    orders.append(Order(product, best_ask, actual_vol))
                    self.inventory[product]['position'] += actual_vol
                    self.inventory[product]['lifo'].extend([best_ask]*actual_vol)
            
            # Can only short if position is short already
            if trade < 0 and position <= 0:
                # The best price to sell 
                best_bid = max(order_depth.buy_orders.keys())

                # Compute the allowed volume
                vol = min(trade + (2 if neutral else 0), 0)
                best_bid_volume = order_depth.buy_orders[best_bid]
                actual_vol = max(vol, -best_bid_volume)
                actual_vol = max(-self.pos_limit - position, actual_vol)

                if actual_vol != 0:
                    # Create the order and store the values
                    orders.append(Order(product, best_bid, actual_vol))
                    self.inventory[product]['position'] -= actual_vol
                    self.inventory[product]['lifo'].extend([best_bid]*actual_vol)
            
            
            # Save the orders in the result accordingly
            result[product] = orders

        self.logger.flush(state, result)
        return result