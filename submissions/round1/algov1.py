import numpy as np
import pandas as pd
from numpy import array
import statistics as s
from typing import Dict, List
from datamodel import OrderDepth, TradingState, Order

logreg_hardcode = {"BANANAS": [{"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-0.05904335231217977, 0.057395816928255905, 0.0, 0.041229505422101055, -0.06618535062661236, 0.08085263909312282, -0.05075459894251285, -0.21061748518989074, -0.0481185758817369, -0.20078730012757712, -0.020140639029595057, 0.14630746865534705, 0.05615993085841134, 0.008271322517796234, -0.08825587578062605, -0.05325424537023493, -0.03569314815561821, -0.13141798573684915, 0.0, 0.0038202984922018654, -0.007702150666722107, 0.010782525537741389, -0.12844034747659241, 0.11335904500389189, -0.020620148368811708, -0.1970782345891898, -0.021025648228267323, 0.08043596757696565, -0.2669603945114754, 0.019821147216249006, -0.216253851781914, -0.051098177683157144, -0.1649319488825919, 0.06179726578892495, 0.0, 0.005276093616862998, -0.038036142676509455, 0.016443825303726345, -0.01505098469066597, 0.018273167208612884, -0.09225788896569388, 0.06211712802146228, 0.2025427163407984, -0.007497595585908831, -0.029977876308429664, 0.06812196409225085, -0.023521459205066684, -0.028517205040337994, 0.09442710997777885, -0.05803110433976317, -0.05803110433976317, -0.0580311043401506, 0.0, -0.001260579642810677, 0.00464805779582815, -0.008196757559855671, -0.0319970103698275, 0.021758542831027346, 0.01402282567237713, 0.012797358335209437, 0.023927653150471625, 0.017402699258241183, 0.01824804540980694, 0.016604901525577954, 0.02561964951659418, 0.06338453062655679, 0.06378661150374458, 0.06213849241321852, -0.1194038084477151, -0.008927199028728882, -0.010111308810044376, -0.007483069025460333, -0.04999282937691458, 0.06782594901321262, 0.06940588781658892, 0.06818732315427077, 0.042345170755713826, -0.02652568123753586, -0.02983195862398657, -0.02852787664609307, 0.09704742351112397, -0.02870937668042, -0.02870937668042, -0.028709376680642707, 0.0, -0.0008553066677669438, -0.00044133437832188775, 0.0008306215106888423, -0.1076991603527894, 0.02285167346266456, 0.014644652035562325, 0.016941215674333897, 0.0433726781842895, 0.019119965189139148, 0.016523690492923775, 0.017572163677793483, 0.06990742635956125, 0.061215182640877074, 0.06311129546113647, 0.061519378703811696, -0.18424565162429732, -0.009098757646399704, -0.011314766057696182, -0.0075503449663474505, 0.02840140831656327, 0.06821987793925145, 0.06858430963591473, 0.06813618261999967, -0.013797221042728838, -0.027711866631363782, -0.030488860516433763, -0.02853486344229002, 0.09301739836722579]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-0.15090533338956003, 0.042596997904690036, 0.0, 0.02125865015450081, -0.004666303106554162, -0.06271231420368542, -0.03261527756300516, -0.2839862426820011, -0.05682780569337587, -0.07432068780618648, 0.1965144978438039, 0.3070214092311768, -0.1309543321157402, -0.030233998207346225, 0.06940806545082619, -0.06636552227930774, 3.161291157468211e-05, -0.0037098563756884973, 0.0, -0.07674509659055448, -0.15514807184561988, -0.08822321322070031, 0.08168602253515785, 0.21191492950954438, 0.13417514758303964, -0.41628564079751934, 0.005851280088376313, 0.0024403986660655108, -0.5367861889059344, -0.15147346913325094, 0.08592752686465173, -0.09117078676244801, -0.09067551337242388, -0.040384422675826405, 0.0, 3.821252965528339e-05, 0.011348731063263916, 0.009104959639596554, -0.18082427933853698, 0.06823475088607472, -0.0883519288135507, 0.03420083961581418, -0.034422912735872, 0.062047367892051467, 0.024053683928325843, 0.007707500633399748, -0.070486621953666, -0.0439940209157417, 0.11577626517628617, -0.15926533343462418, -0.15926533343462418, -0.15926533343563656, 0.0, -0.004374727002743257, -0.00971274165614709, -0.012792737213135712, 0.049494943312731396, 0.009797095631184943, 0.011513742573350218, 0.007839524074851322, 0.045872232746146165, 0.07189085929642354, 0.0685181490536128, 0.06724998135082652, 0.09138993653091558, 0.03372625921067371, 0.03415206515768332, 0.0345188412421424, -0.37293152705735705, 0.06241673599159436, 0.058685398446488964, 0.0621751639286505, 0.1753721734739586, 0.0032366227930196462, 0.004639707456660717, 0.007910657577254262, 0.1959064862755703, -0.049404741907241354, -0.046575863113412636, -0.043984157955306045, 0.10854114280790819, 0.07447723766718511, 0.07447723766718511, 0.07447723766658201, 0.0, 0.01232842555309501, 0.01347217223898695, 0.008723382671004441, 0.08817224430041709, 0.020067637981737437, 0.01266295066816765, 0.011572161689740717, -0.20498018332142218, 0.06989704571520787, 0.05658520817248939, 0.0675597906965283, 0.23696673908872137, 0.03445556687194518, 0.023630585872088085, 0.032850935785855524, 0.12255815075891086, 0.060609296463800845, 0.0590635070664319, 0.062035096054614575, -0.19801356898946698, 0.0011807839007371237, 0.0016157894493460327, 0.007638165202785761, 0.08060058482790808, -0.0500326141374899, -0.04761786096768292, -0.043997250867580814, 0.11876139066300684]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-0.35817742171888795, 0.0033039592437374412, 0.0, -0.046243153427355334, 0.03689816080800015, -0.13105704778754965, -0.2538962343619826, -0.4209638688853745, 0.05411614251785766, 0.4360483590650217, -0.2655571761841632, 0.296772203252418, 0.19313363268088973, -0.14381378182409732, 0.19794155645901906, -0.11349215889818862, -0.2010230279019052, 0.01693601640096307, 0.0, -0.0012654391717768134, -0.003058196343048422, 0.17627688231117503, 0.16309276746242482, 0.36355737382602454, 0.1959765177929346, -0.032003947335614125, -0.4439292043738056, 0.12986180938675, -0.7883891531637022, -0.18265159955315496, -0.0469859033984516, -0.1254069321211953, -0.2007471695456064, 0.027077896469280223, 0.0, 0.021159964497292204, 0.06624343780191538, 0.04113303670966951, 0.020081304821555637, 0.006563018174434183, -0.13784330507920714, -0.00809839961266961, -0.44638194814765464, 0.06485022086160475, -0.0031174054243851526, 0.002092677141511873, 0.10617350642199354, -0.07449851811393102, 0.3698528189494737, -0.12699508125168857, -0.12699508125168857, -0.126995081252288, 0.0, -0.0010337350018192013, 0.00021941975117304238, -0.010186875951310442, 0.02445758087634623, 0.027320684022893067, 0.03153269009303452, 0.033388516118137375, -0.1677889167985544, 0.00918341264478446, 0.006085511788688128, 0.007159664061267222, 0.0889764136141568, -0.003822636644153773, 0.007022329735186377, -0.005733281139978436, -0.19052769711982087, 0.061594511053583455, 0.06919749900080961, 0.06580672587066137, 0.31360016614511105, -0.0014396931174513066, 0.003941502892215905, 0.002385042992429326, 0.27629160161994715, -0.0734617750028442, -0.07389813047524511, -0.07452971673018523, 0.2872499071039637, 0.04913202331624782, 0.04913202331624782, 0.04913202331648753, 0.0, 0.019984432210105672, 0.02254651590627844, 0.030524415429031285, -0.1009324898983452, 0.0530935188653016, 0.03251297814171431, 0.04793587282610455, -0.05566476783198122, 0.007329421177840629, -0.0005940646019592877, 0.006937943874911708, 0.13641820446415198, -0.0050488230419261535, -0.010491136560951015, -0.00926512110711487, 0.04471736084175191, 0.06499984570879747, 0.06617161458752992, 0.0650987303990739, -0.26953177351382235, -0.0028166309861113515, 0.0006165246271383172, 0.002213572527605531, 0.029718224031750326, -0.07545234311855567, -0.07525982594726167, -0.07452817365750944, 0.3354382770014869]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-0.25212221367440957, 0.021716421330788993, 0.0, -0.16540894725055716, -0.037448294212523325, -0.07767325972805955, 0.143967469456793, 0.17104748629711772, -0.0930401470148293, 0.283338276119049, -0.1411658324432301, 0.18711341239249576, 0.5075347972295702, -0.03035694218286498, -0.1901993276175109, -0.14376480799231192, -0.31510453979873004, -0.0005258614355678079, 0.0, 0.18993365467225676, 0.019362147538054805, -0.06761807988074622, -0.002576539114384811, -0.17369398555842372, -0.3975581436938801, 0.15358008890706476, 0.3102280109860851, -0.13645639937672355, -0.8841600262994246, -0.13265257940245487, -0.08958168236383712, -0.1728995306518539, 0.007469849861504205, -0.06920939300079848, 0.0, -0.010357767355693, -0.011513078460220543, 0.035869553240570215, -0.08018285392291909, -0.0009703865337153905, -0.18529609833350907, -0.08004137123398578, 0.19009408892312182, 0.08317278189386725, 0.056392834300505415, 0.10858281584009474, -0.1343032054076012, -0.12442885084189768, 0.38863885211074006, -0.04772411569630538, -0.04772411569630538, -0.047724115695722026, 0.0, -0.008204046655239152, -0.012771780202193706, -0.006327812607819065, -0.014712487100512102, 0.03551369927038189, 0.03447035386126312, 0.044806729503968884, 0.038169824257848387, -0.002182906796415425, -0.0035252979620271495, 0.0057743013227754564, 0.10282630128081312, -0.07531253421090457, -0.07631066253127658, -0.07798794320375733, -0.4345292220371019, 0.07692835284713608, 0.08070820258795425, 0.0833725235143955, 0.14728950082974274, 0.1054651059887774, 0.11138288315361985, 0.10877532451270858, 0.031024687661519022, -0.12916153235993535, -0.11868128454094858, -0.12448135242082708, 0.31646392285862923, -0.05341178109146125, -0.05341178109146125, -0.05341178109151745, 0.0, -0.017213156581693482, -0.01608021075127224, -0.01578397773963952, -0.11858332806536548, 0.03868293659721392, 0.028221610377534904, 0.034449027469069984, 0.0961620448392606, 0.005104779856526811, -0.004582321532726648, -0.003301826384159829, -0.025992956267309453, -0.07348821013557758, -0.08527484169292997, -0.07960068383709741, -0.17152371703977334, 0.07372731272871318, 0.07674048749440009, 0.08378804229356825, -0.06854691075417547, 0.10582119820096406, 0.11163797725468581, 0.10879428648052925, 0.11225640344076018, -0.1284154538015104, -0.11837779302623706, -0.12442341964944985, 0.4004653005143658]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-0.05106692300772319, 0.035249279694708965, 0.0, -0.003224376102457767, -0.08862078325222224, 0.01890518673170674, 0.07833938771781855, -0.04584028548777697, -0.05840085722639524, -0.25705812517732357, 0.054411693658260755, -0.21270073937274514, -0.03597027080709627, 0.0006782931666153741, -0.0663972692091045, 0.024697606504483823, -0.09370288652853506, 0.02749173543063313, 0.0, -0.09799383543666265, 0.0804164563678676, -0.023940133154941493, -0.03991793487340995, 0.11756000177501721, -0.1647994103473268, -0.09914796395020282, 0.008944343627881494, 0.004595702583462866, 0.3010224012735283, 0.08757030060172302, 0.011878262121979215, 0.04062589063403475, -0.05386221431808624, -0.022382333535621832, 0.0, 0.01396350568047356, -0.037420708223275305, -0.025601402451454973, 0.02011776936870594, 0.03449111520162017, -0.021328627991590517, 0.04587387572792542, -0.2154786714696152, -0.00422417530884188, -0.07954271162128677, -0.01136348689843691, 0.06702718176165973, 0.026995603939038895, -0.03188092947221109, -0.0747070524606088, -0.0747070524606088, -0.07470705246077085, 0.0, 0.010576946570676149, 0.009540267135334169, 0.006207772672493013, -0.055326028475032964, -0.020797488318289915, -0.02017759238319708, -0.02642578817178876, -0.014183498775573915, 0.03213331871236103, 0.0364272502230171, 0.036296973241015114, 0.0944959562040085, 0.04466694420931498, 0.04777123322010059, 0.04527428626653397, 0.05265247222138725, -0.00021632520393166345, -0.0012460765330742675, -0.004619360641780565, -0.10139146985688846, -0.006966957833229254, -0.008964562228339669, -0.01147259573453806, -0.020408026161303217, 0.030354275968345435, 0.02580497663195225, 0.02699670553485187, -0.021495820550683813, 0.1309027161971708, 0.1309027161971708, 0.13090271619668187, 0.0, 0.014038417035925841, 0.021793943032030656, 0.020275988296527683, 0.030088932533203206, -0.026358299590632562, -0.010669967824956663, -0.027110335001226716, 0.023337081711303508, 0.036680319077430974, 0.03217843332248537, 0.03483347079877808, -0.05528280020277689, 0.04522100901165517, 0.05453223528784698, 0.04627550032062723, 0.14049174944728954, -0.0024636339959325537, -0.0006609646655633202, -0.0042121368722477315, 0.06884788688833751, -0.007002882492090444, -0.009256611505454398, -0.011372748460942718, -0.007500032548146302, 0.02954195639404608, 0.02572511534793486, 0.026988822925992972, -0.038159927427414184]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-0.08841183563376534, -0.03352434647580496, 0.0, -0.037611767790924455, -0.051831596296301546, 0.12618746712353449, 0.10459290258596259, -0.08439954849526199, -0.013937447929504054, 0.05411841679238604, 0.24064830138502613, -0.02672616407964888, -0.46640512919130667, 0.010359524533629974, -0.20951417624966198, 0.03616800836935336, 0.08472724470626046, 0.1386122624583433, 0.0, -0.016795050997250174, -0.005997781493561484, -0.017904124594360492, -0.27613345840545545, 0.18739482374808014, 0.12445643124010138, -0.26031423298233547, -0.003263902340904008, 0.06312337227902032, 0.10203370213451868, 0.11099744999941857, -0.13243566515399474, 0.06723406169835083, -0.1326128031761845, 0.05309727386572591, 0.0, 0.022913868592301934, 0.15365420416251363, -0.01158273542181793, -0.01193969706996027, -0.027478376274398746, -0.013616707882071474, 0.01669261173367713, -0.2323657185294915, 0.04315313192715757, -0.013343897999104513, 0.014310605741316044, 0.034788426886707455, 0.04889233727448158, -0.11700461835438065, -0.04100907894366807, -0.04100907894366807, -0.04100907894284701, 0.0, 0.0025184102220404945, -0.0032692777981302287, 0.0068701383261770416, -0.006503285292309835, -0.016203225189527222, -0.011634303582957257, -0.00822229125376029, -0.028610903906365722, -0.027255673102086268, -0.030951531312267255, -0.02789781164086322, 0.09399312793372586, 0.011536754679242802, 0.012691342955429704, 0.016619669039759588, 0.13364430413217404, 0.04046592762120647, 0.03944752671664635, 0.042952956092684715, -0.059381702989175174, 0.019793777240947538, 0.01825448984792903, 0.014212101270200157, 0.08188700432128275, 0.05175011106172713, 0.047149155192236496, 0.048909622165071207, -0.0597344662945247, 0.11167350422942307, 0.11167350422942307, 0.11167350423015211, 0.0, 0.02180868564997581, 0.025208794694707354, 0.025428660369776923, -0.053758849723083806, -0.0053895465710973875, -0.01528508834679857, -0.008888896429091004, 0.2068017530306552, -0.028321651809113398, -0.034701477844977256, -0.029508264023520133, -0.04649882759106881, 0.013715100462220872, 0.026652183845199236, 0.01563204836388649, 0.07413524851845381, 0.04071684047930018, 0.044194408422987476, 0.04299436481822321, -0.016479024063513148, 0.01844375211183703, 0.02081874955294449, 0.014143843089923155, 0.02929808651713991, 0.050785201900678416, 0.047319148141153955, 0.04890607016995793, -0.07490626234744194]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-0.1621439342166611, -0.08108326009706422, 0.0, -0.006005772471102384, 0.023594851972717257, 0.1221025681652901, -0.17327473953910189, -0.0013886153406430064, 0.39156375486349465, -0.40132044036602804, -0.15499231592632082, -0.13871659869246894, -0.11597014074304646, 0.020075413590104445, -0.4489668601635307, 0.044590466306454586, 0.039770099684882626, -0.01748240241294386, 0.0, -0.033488246881726164, 0.10183803103121912, -0.058856017481421996, -0.11003019544671329, 0.015020669044316787, 0.03538102768182426, 0.09137460092708223, -0.04420065571603866, 0.08253533691647816, -0.4469081509526048, 0.14539725531283174, -0.19489695978197397, 0.0641964453619199, -0.07778615470292083, 0.06224867417774383, 0.0, -0.0057978245224499765, -0.0059415415366728215, -0.04511622806181568, -0.057769823699358465, 0.053931152206625615, 0.10509458377817414, 0.073498336321462, -0.3796496126414004, 0.106183112041493, -0.12330948074240479, 0.023081600451374237, 0.08523114670952048, 0.04697502363176107, -0.10292916018504573, 0.1140624429369492, 0.1140624429369492, 0.11406244293753351, 0.0, -0.0019960724357426635, 0.005197223213121273, 0.004287231298841737, -0.058749799182502664, -0.055064449154445465, -0.046385635151983566, -0.03949606344625104, -0.019558787866927288, 0.048926943356224016, 0.06386914005181968, 0.05450216190058687, 0.022376958437649298, 0.06275432944993925, 0.07621326648738275, 0.07315712956323413, -0.2177600147078239, 0.10890366951600523, 0.10639988201809127, 0.10607259385941104, -0.17604554532761787, 0.0313508134638921, 0.023704684289677546, 0.02302347184536657, 0.17757079864818337, 0.048874882702008016, 0.041449799043341284, 0.04697861407746909, -0.06506744919841306, -0.04504050044075166, -0.04504050044075166, -0.045040500440110556, 0.0, 0.00045491178208876133, -0.0009694642509896828, -0.007482796477690157, -0.093740663501446, -0.049069974845443794, -0.060504027963281255, -0.05336500585357269, 0.17953717773896605, 0.055552630391561345, 0.04698542246189289, 0.05185279362866022, -0.3430318761498196, 0.07197573009108503, 0.07406148003383584, 0.07209188698692423, 0.660918659369203, 0.10833216685480486, 0.10486960350709043, 0.10582101129507203, 0.017883275752387125, 0.02615712501985851, 0.022651152756626308, 0.022816435135057777, -0.12015719816206714, 0.048067355160610496, 0.040909654330141605, 0.04702882424601838, -0.08895585087180338]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-0.17749138583000132, 0.019713206327955913, 0.0, -0.004148405443328627, -0.01528599239926962, 0.04009775366990796, 0.12291881541564847, -0.015299922048186124, -0.02175800484590842, -0.9478859076379095, 0.011539302103431402, -0.08974490359796909, -0.47299038632883134, 0.09076851397150312, -0.3754347086139976, 0.09158531004565264, 0.15541774728757402, 0.017736424293182545, 0.0, 0.009611431383453693, -0.012415341183010046, 0.07865835687003893, -0.16714089312074798, 0.32415713067816293, 0.09803111733019665, -0.2868063746054614, -0.09602457442608234, 0.1735072008955045, -0.08590018478540233, 0.22459448188466297, -0.32552890163073084, 0.10626987737716109, 0.04669101739572676, 0.016788678434308202, 0.0, 0.010825994823452497, 0.009174218257099593, 0.02652516948840904, 0.05246197236486846, -0.02453117707381416, -0.06553278445086459, 0.2179686001290344, 0.22141711710089965, 0.06576750298824463, 0.15334652402157928, 0.0420746300930882, 0.1640238421533438, 0.07914189747130007, -0.29998086483262737, 0.05589088535215223, 0.05589088535215223, 0.05589088535240852, 0.0, 0.01700693397198101, 0.023238937209731237, 0.01438073199636064, -0.08996252494459733, 0.05508081804399664, 0.04048197583003337, 0.027018501612987186, 0.10377145219118562, -0.015395016567683068, -0.012622906698235983, -0.027879110693834443, -0.10582415140567478, 0.21349713615539304, 0.21901036762419854, 0.2166454704438943, -0.20919883000209955, 0.07592224518739389, 0.07153307531906328, 0.06573238388080582, -0.29165588428664113, 0.044195239554706126, 0.03527840821029713, 0.04193011095638315, -0.046376963008872576, 0.08185137300929146, 0.07244813216225338, 0.07920073781236125, -0.22342143838190234, 0.0396923826023863, 0.0396923826023863, 0.03969238260332755, 0.0, -5.014965343067207e-05, 0.0022365470858846837, -0.0006580043128605474, -0.09646077949765706, 0.016918268875460128, 0.017962244891998796, 0.018740236500016806, 0.007480282248407001, -0.026054734943504517, -0.02166977698202257, -0.028014691372265487, 0.0389094649370981, 0.21252014865248092, 0.21738902511490546, 0.2166674534051128, 0.15720981328218214, 0.07921554575675069, 0.07143711787477745, 0.06574177797792774, 0.18761457495735961, 0.04385996513772654, 0.035606108083772424, 0.041800794903503545, -0.02605209200429447, 0.08290868359806748, 0.07247766085335432, 0.07910699268314077, -0.2741052082260772]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-0.03436673836396776, -0.04236172937513022, 0.0, 0.037739985361745255, 0.012649946255061308, -0.07581832693434687, -0.0220828655068346, 0.35599747374824015, -0.05360939077414563, 0.46407183447278055, -0.05701131444497012, -0.12727157716606072, 0.05911172107270994, -0.004175239291791344, 0.5095658299737784, 0.02975682277459022, 0.1108036381657614, 0.03316814136198931, 0.0, -0.0017795644638838029, 0.007132044423973781, -0.015827717566417508, 0.05704446495128046, -0.3225774559606004, 0.02862801018854455, 0.2947309101001012, 0.03415835324740438, -0.12856085661070393, 0.7290353077753929, -0.11494119250829711, 0.16462665771788068, 0.014076751779492613, 0.13728149025184352, -0.030118114992457836, 0.0, 0.0068024313308213845, -0.015152393558736776, 0.00838045369850841, 0.02346491703801248, 0.005979758821994506, 0.03466557261118812, -0.10549711857777787, 0.10978486809786098, -0.08583696656187509, -0.004522101665203033, -0.06923303688274993, -0.11068953773038595, -0.0012877334779055826, -0.02756825110625139, -0.0023419363476272974, -0.0023419363476272974, -0.0023419363475064097, 0.0, 0.00842478630029094, 0.00959913511389164, 0.013681307832840507, 0.003103555334845551, 0.009062411612741118, 0.00018070237751632978, 0.006252391291699996, 0.016230446946396554, 0.009733462671559799, -0.0024540184402638784, 0.005440006697534901, -0.10817233486606438, -0.1020815068767955, -0.11290473579633335, -0.1062046618624852, 0.35648835240606963, -0.08745592795784767, -0.08519212853606305, -0.08598870998786386, 0.052180529712147934, -0.07235675201126891, -0.06785056270763686, -0.06933088896789648, -0.2017605909639845, -0.0027737898028320305, 0.003287368924674752, -0.0013022578394543483, -0.06096684824622863, 0.004036257305183676, 0.004036257305183676, 0.004036257304712208, 0.0, 0.020911292358222443, 0.018902458450279255, 0.017825410825195186, 0.022166399858626697, 0.009237358468478155, 0.008676607871547464, 0.011761169090719361, -0.06411026537010767, 0.005562621756729398, 0.009095194959846089, 0.00860370846067109, 0.006140474865452238, -0.10708479292093331, -0.10488212177701522, -0.10400062854749555, -0.23310575831194888, -0.08705542639008526, -0.08311611511900414, -0.08581486123324286, 0.05733372090903458, -0.07004113099184515, -0.06621853487040683, -0.06905384409767593, 0.00844945575110102, -0.001210668113136901, 0.003746826921893304, -0.0012672576034211782, -0.04121345024592343]}], "PEARLS": [{"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-0.06275234120076736, 0.04659378176104124, 0.0, -0.17202111522640906, 0.05715515058118996, 0.11516838580259037, 0.0029815562115731325, 0.17500318246245686, -0.10812964374936082, -0.4024348445270444, -0.0031303846037592513, 0.06829441130164911, -0.38218003905838493, -0.08957628445989388, -0.19608621379230926, -0.056989024037419664, 0.04419670719760337, -0.012984518095031537, 0.0, 0.0740440810358256, 0.06508746214861034, -0.13418703491951942, 0.010851293978090305, 0.06564062748058185, -0.06446872164971652, 0.1275811105566774, 0.07500331576366473, 0.21532310985079775, -0.1834641069070717, -0.05844193315642412, 0.026797515713114783, -0.049943384166591394, 0.07601749145745176, 0.017415348962764428, 0.0, 0.012275907008471932, -0.019663812466116464, -0.028061398034541753, -0.13475109300002946, 0.03566941632577722, 0.194732002906405, 0.005817593248045731, -0.03883989058572405, 0.05654532384794073, 0.05241100665868511, -0.02294675144094239, 0.37845142742056775, -0.02010438136501582, 0.0483522667880103, 0.01920609139720459, 0.01920609139720459, 0.01920609139981197, 0.0, 0.0054096798531194, 0.010521462166850924, 0.012753930146447197, -0.17460000556930283, -0.022573502591307082, -0.027203764884078944, -0.02657564947951467, 0.11575649835905562, 0.03953518770396561, 0.03544228457525976, 0.03720292957787642, -0.10997068360831995, 0.00591293875254592, 0.00583377398408235, 0.00577628394992235, 0.10016494202560174, 0.05654568181906931, 0.05654568179328822, 0.05657285795787091, 0.030024034125046176, -0.022942601652515028, -0.022942601646324928, -0.02294283340652762, 0.04877158880371701, -0.020105203513871125, -0.020105203510463462, -0.020093478983234384, 0.033325313439039245, -0.013837331082454073, -0.013837331082454073, -0.013837331075222413, 0.0, 0.024193260198235287, 0.02348035118632549, 0.023585310681220165, -0.02394845201519293, -0.0264403998971647, -0.029883316850818895, -0.02602054948997176, -0.05089155819660618, 0.03556667852043407, 0.028704932798227216, 0.035570657845544015, -0.01365640533379897, 0.005833773990632518, 0.005805840484902944, 0.0057829014369218164, 0.07297202106580843, 0.056545681830094265, 0.0565456818043647, 0.056551364053849154, -0.2775624902243009, -0.022942601655157796, -0.02294260164897671, -0.02297806177793227, 0.16127176363477008, -0.020105203515338083, -0.020105203511934445, -0.020115278814799555, 0.03934367368144916]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-0.23098802957476416, -0.11036182101246499, 0.0, 0.026003018823548395, -0.11108429562620319, -0.07683657890108847, 0.31522703202756597, -0.0566100400710292, 0.16242061587506754, 0.43972516589169847, -0.16017745150170182, 0.03416134640376982, -0.17631466547804747, 0.044791622510723786, 0.2970247675464918, -0.0346577446953637, 0.14538387920613452, 0.04665634062310533, 0.0, -0.04272024800939, -0.09866821643711567, -0.030064113966732742, -0.013381043588815875, -0.19210905768812547, 0.2089212097300178, 0.07397852224928575, -0.11078422613713414, 0.051958890269801404, -0.24723379256622183, 0.018322990709428326, -0.011614200541075865, -0.022947831358953334, 0.025672650351129592, 0.03258356241529846, 0.0, 1.0674629594324554e-05, -0.11639354698368208, -0.0008746500994811265, -0.38408976942199763, 0.03499336605935186, 0.09602576626071002, 0.1086832661125187, -0.0380284054815184, 0.04198546750075823, 0.09275428849494777, -0.00315246877008227, -0.1241785779880053, -0.03918148009866139, 0.28853090275861526, -0.0027188580376912505, -0.0027188580376912505, -0.0027188580356227406, 0.0, -0.012853311028936108, -0.012503256947005955, -0.012148804376907353, 0.14456813065229107, 0.003129832683652512, -0.0036348279390355583, -0.0031337735160904268, 0.029932388908523403, 0.04003699171350227, 0.035099935883720984, 0.03384293398071402, -0.14200447914412953, 0.10881057515088692, 0.1087213215547523, 0.10866968827821798, -0.2358696797790085, 0.041995305336353164, 0.04199530531720591, 0.042056780068554886, 0.07661590473767718, -0.0031618913654858807, -0.0031618913646328265, -0.0031139337237570653, -0.24414108644088583, -0.03918859357699698, -0.03918859357035433, -0.03913871659863688, 0.17842657204402837, -0.050204954779368274, -0.050204954779368274, -0.05020495478004628, 0.0, 0.013388334675810964, 0.01480923998767218, 0.009832675003180613, -0.198603864071678, 0.0006681412414304836, -0.007565460997921146, 0.0013918151215529622, 0.2722918470659014, 0.03509289066763663, 0.03283172303390954, 0.03492524757443469, -0.2586282573068106, 0.10872132167682384, 0.10880482559766738, 0.1087640378499249, 0.06599964881082752, 0.04199530534454149, 0.041995305325431775, 0.04197086158403631, -0.2151083617085455, -0.003161891365850138, -0.003161891364998131, -0.0031792582486772805, -0.0345982641584639, -0.039188593579856455, -0.039188593573220756, -0.03915939754603828, -0.18970721315747377]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-0.34101847386275086, -0.015738581487065004, 0.0, 0.12654359071076118, -0.17121772278870398, 0.2950033424168382, 0.5597675687415625, -0.32364973984444245, -0.34428950676032694, 0.10857900909856773, 0.2561794501555303, -0.27115610492976355, -0.2502796703536827, 0.18826343308849225, -0.2586620598018923, -0.016308560720595063, 0.028713377506011398, -0.022396828048430233, 0.0, -0.05442643121205558, -0.1900659538258892, 0.1446240131887351, -0.1312305100796723, -0.06714372725114352, 0.2260718415313196, -0.7412741560643211, 0.012570931061849706, -0.5310035621568991, 0.43436785334757294, 0.05118121703537768, -0.012757567398132726, 0.0018342067959629127, 0.10338200426249501, 0.0025815789035707683, 0.0, -0.0006741162597733538, -0.04374994649097999, 0.04574060179674641, -0.026674010972746322, -0.0002636848850530177, -0.027817818731731513, 0.17498599366424664, -0.34611016475923445, 0.19230824086356244, 0.44054213359473365, 0.10470450282669287, -0.7391149005674869, -0.013884735913949172, 0.029313220096428238, -0.013134188755624764, -0.013134188755624764, -0.013134188749362554, 0.0, 0.010828915578987859, 0.018029398585149133, 0.006483372144628777, 0.0970680692818603, 0.049333779162648986, 0.04877696798885092, 0.0399858824523373, -0.36625826445772514, 0.0026867740564067684, -0.00031540190718733424, -0.001872123133106367, 0.23359951332157478, 0.1751394705285166, 0.17506014668660322, 0.17524120729057358, -0.002798028663322987, 0.192339903494827, 0.19233990340713686, 0.1922184845204663, 0.016927899111169757, 0.104693220041821, 0.10469322001357322, 0.10481685665997911, -0.011524058763695812, -0.013888391721524836, -0.013888391719171956, -0.01385445564439464, 0.09528677146607137, -0.014808091175718343, -0.014808091175718343, -0.014808091153681495, 0.0, -0.025261455595515386, -0.02955735770449118, -0.02321786646524706, -0.08540830352487197, 0.039642322925199196, 0.04280334924351372, 0.04259913484704535, 0.106063792786945, -0.0002215710142422722, -0.006156870844669678, 0.0017109350296899885, -0.15782689650347406, 0.17506014688316351, 0.17496167321007988, 0.17521653186437205, 0.014054100542954811, 0.1923399035323305, 0.19233990344481275, 0.19244107870187863, -0.17167335935436762, 0.10469322005388229, 0.10469322002567387, 0.10475526891041652, -0.38708038524675903, -0.013888391722538642, -0.013888391720186419, -0.01387138163512057, -0.13767236178911627]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-1.5607169726541987, -0.7993680371115875, 0.0, 1.173764649152442, -0.06406505876293524, -1.142244666143447, -0.3361480561555122, 0.19533082344807656, 0.3515334955729047, -1.0230297889149258, -0.24713013842056303, 0.05789115586772081, -0.3171874561639198, 0.0598253668042509, 0.33887681945310766, 0.005910114171943995, -0.01736782616411141, 0.7195453397884916, 0.0, 0.31060498127527647, -0.32639743493966844, -0.013297565879383536, -0.16448130615982792, 0.5058721608534217, 0.08846250878100798, -1.2723798550899936, 0.38248898787774677, 0.34665650014413496, -0.5246205234921743, 0.06054096862088365, 0.15170607616637477, -0.01446614828969028, -0.0035733273161946315, -0.2447472549312633, 0.0, -0.012721319699922953, 0.28566494472416964, 0.0038722321498799632, -1.1772220306648702, 0.03861016397924509, 0.2628027755523467, 0.33751310041640525, 0.15600934036788927, 0.2476789140732144, -0.3027947876758774, 0.056104203220901684, 0.29133129928575624, -0.003015659702909499, 0.2163284984891032, 0.008043156110708051, 0.008043156110708051, 0.008043156109764022, 0.0, 0.004704102297684312, 0.0008222939490667543, 0.0044234246227056115, -0.24677371436490186, 0.008547150098669187, 0.005811916779182738, 0.008717810765271922, 0.5531848161282321, 0.037914665847036906, 0.038111807244179535, 0.03991883315942754, 0.37852376347151173, 0.33748732467162873, 0.337437329442791, 0.3374409825862812, -0.4447186868301045, 0.24768936853241894, 0.2476893684194937, 0.2474778013053109, 0.33518970427825484, 0.05609434920700723, 0.05609434919187122, 0.056070195125168296, -0.4512996645462307, -0.0030125136682828436, -0.0030125136677726367, -0.0030413871630335316, -0.32332214126928066, 0.25750646268750316, 0.25750646268750316, 0.25750646269329686, 0.0, -0.04223298761157993, -0.041544847515322544, -0.04767003199022955, 0.5158243682341347, 0.0013337567622778589, -0.01729806650603696, -0.008894550298753955, 0.26292413607144044, 0.038200762043530755, 0.04204318805346081, 0.03817390331610128, -0.6046593825999419, 0.3374373298216702, 0.33730211073783084, 0.3377933609101681, -0.6801740526234497, 0.24768936858071358, 0.24768936846800757, 0.24765640562621122, -0.5679481866632565, 0.05609434921346957, 0.05609434919835553, 0.05612539598368889, -0.539042741910906, -0.0030125136685032637, -0.0030125136679931006, -0.0030307783945769575, 0.051886240985649194]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-0.09701756882235743, -0.0632274127431432, 0.0, -0.0532912033246676, 0.07165514361900023, 0.25828037960339556, 0.0785222866682689, -0.0034381180948084736, -0.052798713496189816, -0.28798804092638797, -0.14097540447505127, 0.2095179092158947, -0.2017923988842279, -0.01974806742873922, -0.16575832872739804, 0.02036454130849685, -0.11504485912468101, 0.042345819139153154, 0.0, 0.015485787385101639, -0.1554695493930907, -0.22413748474016645, 0.08732492383478999, 0.2915697718703144, -0.019043472373528218, -0.09612489701138324, 0.30657532428077666, 0.03942483215789486, -0.27990199620237016, -0.07487416344647045, 0.02978582375114634, 0.010186778956074609, 0.07709587032023314, -0.16214982322926141, 0.0, -0.004688625760343286, -0.01792107396807879, 0.04097979423691596, -0.008086683788146845, 0.009887376039090023, 0.16779827582356507, 0.035962590179886435, -0.11444244240386084, 0.0550127080693292, -0.05017560352475066, -0.029818377459847323, 0.1752879765059105, 0.008449394320051101, -0.05690751201143845, 0.005104393074146279, 0.005104393074146279, 0.005104393075798182, 0.0, -0.007380877287670428, -0.008253673086823381, -0.0059406055099125625, -0.04058542847900465, 0.04263495658188934, 0.04030278766925096, 0.04191390728098507, -0.09099762061217562, 0.01484176638898749, 0.009633944922505125, 0.009548892540087348, 0.04133508236331702, 0.03578618265987319, 0.035920252504373223, 0.03575840968600271, -0.019855397060043606, 0.055014148723631216, 0.055014148698549516, 0.054948297427619905, -0.07122866389945816, -0.02981494011239598, -0.029814940104351168, -0.029812515918995842, 0.1051781147294831, 0.008453534035803935, 0.008453534034371546, 0.008454506405420201, 0.0017766481122357288, 0.014833847408201428, 0.014833847408201428, 0.014833847403316756, 0.0, 0.001733583318598957, 0.006125376639595384, 0.0017783352466942204, 0.045449355152239065, 0.039514781296508726, 0.04287395261096163, 0.04175009166974903, -0.25116651781246596, 0.009685528323693099, 0.011077516223267157, 0.009661054102704982, 0.02230276648212346, 0.03592025254470503, 0.03583123830674364, 0.03596349905589026, -0.11195208585981273, 0.05501414873435811, 0.05501414870932577, 0.05501687385151259, -0.0406711355762213, -0.02981494011583118, -0.029814940107798397, -0.02982677309472287, 0.13403531001079752, 0.00845353403642089, 0.008453534034989009, 0.008438379815139884, 0.06608376508135211]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-0.16159835660103375, -0.029850115575291145, 0.0, 0.21877831714715817, 0.017549706930739383, -0.17296193045808916, -0.13913768370982096, -0.14243727057839684, -0.026941593751811606, 0.2043018863065549, -0.07806083268936564, 0.15750578687975217, -0.08189190829359679, -0.05172458687371882, -0.2917651659589737, -0.025939156781501122, 0.010734717901960152, -0.07200687386862432, 0.0, -0.2701229473188344, -0.11487224382329338, 0.5571910688009628, 0.26384282684019067, -0.2775938125281572, -0.16256602061606598, 0.3520266842779433, -0.0688404314075116, 0.09973935167658772, 0.07110130123402067, 0.04251679362680859, -0.25592647316131534, -0.023169988187069893, 0.03619244586044761, 0.1859548886279686, 0.0, 0.0030701656360182716, 0.13973534210363953, 0.0018769019224986563, 0.03774206241638531, 0.09140712993944454, 0.06523034098686442, -0.10318347431369787, 0.0001428613235041479, -0.01851127278211503, 0.15020138005663403, 0.050275699801731875, 0.3376718408305814, -0.003599789511360263, 0.009181364500147114, -0.06107272430353024, -0.06107272430353024, -0.06107272430260133, 0.0, 0.020564244248185818, 0.020309842601400677, 0.02203067789737175, -0.15317673831876366, 0.012457681774548373, 0.0012834481965249716, 0.0011745826767780635, 0.08971314610260663, 0.0920359784206472, 0.09156087209235861, 0.0912402572173401, 0.035992469567521675, -0.10309932828183518, -0.10318113440715863, -0.10304120969845802, 0.1526506997861414, -0.01852700297614325, -0.01852700296769606, -0.018406515837778418, -0.21068047569480752, 0.05027968408624039, 0.05027968407267284, 0.050204553562664254, -0.32590702458827425, -0.0035993242560895832, -0.003599324255479578, -0.003615374417914976, -0.031346019715392595, -0.08548510048460173, -0.08548510048460173, -0.0854851004684234, 0.0, 0.01193330711735833, 0.01711411886226037, 0.008841453636597591, -0.11251075619880414, 0.005756189874637296, -0.010894009213246502, 0.0021309598379295903, 0.2396933130859832, 0.09167982086235184, 0.08572260419315147, 0.09215565876758852, -0.3037440702808499, -0.10318113452301259, -0.10329152442304176, -0.10321648490569113, 0.23685439010051498, -0.018527002979756492, -0.018527002971325073, -0.01855875067704941, -0.03661796213299072, 0.05027968409203332, 0.05027968407848601, 0.05019023299578833, 0.2803739856080149, -0.00359932425635095, -0.0035993242557426403, -0.0036127568076271886, 0.06216829103521]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-0.28823040142201733, -0.03853900733058964, 0.0, -0.1556605893484273, -0.0802542163375388, -0.36788564688228353, -0.2590185865223447, 0.39599094824295333, 0.19427551448114402, -0.0038054998587991776, 0.0044101821725671085, -0.3815562818408067, 0.4480702988468559, -0.023080600002153624, -0.024340763675374206, -0.01166016841497133, -0.0027280622635870774, -0.0004043249187692739, 0.0, 0.08187933156774584, -0.06149824606134924, 0.4420739312030235, 0.12090651987471333, -0.4632175170642449, -0.3424317679740177, -0.2551207823998044, -0.06308560046738344, 0.34319642783237697, 0.14408146048954965, 0.16108878608906899, 0.08611368458046344, 0.03239802413141445, -0.016981937355920327, -0.47665590237136496, 0.0, 0.023059152445003006, 0.1117792512879879, -0.00866637400997423, -0.39869112906579707, 0.005505746962876585, -0.08265502178675363, 0.02814517682487775, 0.19288036402761105, -0.019680928790116264, 0.12250204951284635, -0.020906571282215427, -0.3838363235836292, -0.020585653820249742, 0.08656140241728622, 0.02883283063773173, 0.02883283063773173, 0.02883283063629265, 0.0, 0.027077369130421164, 0.03747117431693897, 0.018295866609082424, -0.09412528258844366, 0.00284557643981891, -0.002580939049361699, -0.013603290650312627, -0.13803641621059815, 0.008619797688154181, 0.005977371297327458, 0.004765973718662304, 0.20079187015223685, 0.028263950931321138, 0.028209812857940622, 0.02758686334876732, 0.11786608506115506, -0.01964188057339289, -0.01964188056443746, -0.02005630640072855, -0.5114998979015888, -0.020882017275440902, -0.020882017269806322, -0.021009267966171634, 0.08439410370851451, -0.020581003843085786, -0.020581003839598627, -0.020626144781122395, -0.04256521946256543, 0.11632499149753436, 0.11632499149753436, 0.11632499150072678, 0.0, 0.004027139085559493, -0.000918411163379321, 0.000134584402696521, -0.051820141268126604, -0.00822789830710134, -0.0051470738988706535, -0.01599098224653139, 0.19027259831431675, 0.006092459244127867, -0.007848748039371084, 0.004080576534211511, 0.00869997136649024, 0.02820981288961622, 0.028114295625573202, 0.02771202606782579, -0.159134041310272, -0.01964188057722224, -0.01964188056828534, -0.019928018642531495, -0.009359485711688797, -0.02088201727784668, -0.020882017272219847, -0.02093294109918373, 0.2364309100665478, -0.02058100384458776, -0.02058100384110314, -0.02061632391999922, 0.07780080826627574]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [-1.5365998803571521, -0.15063444259252814, 0.0, -0.018949541129693145, 0.19520279261879156, -0.45898355526134316, 0.7055828208175288, 0.8622519188059533, -0.5678649096996764, -0.2876727711613666, -0.15300098701259862, -0.3772742683938205, 0.005699432314062214, -0.23196547251609098, 0.31587540061515645, 0.05709064455767798, 0.05158698014570324, 0.17388262293685017, 0.0, -0.36970336777398166, 0.24141349473623533, 0.16182060157582875, 0.5819380140936539, -0.40285992137236953, -0.46054411609668594, 0.29081680833446927, -0.8355865573304033, -0.051979992568909866, -0.0365721844490555, -0.2839334507492072, 0.07738522284459623, 0.13808847297150645, -0.1059471487859223, -0.14429053768138608, 0.0, 0.008945711384032252, -0.3924515424528421, 0.00882334145708097, -0.8606154804249042, 0.16707949580906709, 0.4348262306025683, 0.0443812596355686, 0.22337963522583268, 0.11974883555164985, 0.11877455686046394, -0.1787589960416182, 0.8859292213664068, 0.053425556010502064, 0.04316961690740694, -0.13786036942531982, -0.13786036942531982, -0.13786036942589427, 0.0, 0.013460382344069058, 0.002963883217498462, -0.004737575373630216, 0.5708938050978682, 0.01261450519194399, 0.007440614351119388, 0.00914727871563798, -0.2818087819335325, 0.15541768101664227, 0.16662918139562677, 0.16761509297657093, 0.09577518183748132, 0.04427910659300368, 0.0441581591792289, 0.04348045499107738, 0.21851437401751553, 0.11974242319148481, 0.11974242313689276, 0.11975451264826678, 0.09595008410092848, -0.17876561735338364, -0.17876561730514784, -0.17862492219088072, 0.661927510936468, 0.053416449842768644, 0.05341644983371579, 0.05342406512544185, 0.1684645614182669, 0.11739606245263874, 0.11739606245263874, 0.11739606244489094, 0.0, 0.03280135654071145, 0.03121067798849995, 0.04916497344495462, 0.21887209575100985, 0.005310994564864312, -0.010184257931303236, 0.019366140066055585, 0.4504158383850895, 0.1666626880989574, 0.1726116350919583, 0.17140475871586788, -0.5573208221535862, 0.04415815922881243, 0.044027969038074585, 0.04491817770692643, 0.7538962527958176, 0.11974242321483389, 0.11974242316034772, 0.11970782567405804, 1.4837233354623511, -0.17876561737398142, -0.17876561732581214, -0.1787137564337798, 0.305783022126804, 0.05341644984666649, 0.05341644983762084, 0.05345186077385733, -0.13540925648388125]}, {"learning_rate": 0.01, "num_iter": 10000, "fit_intercept": True, "verbose": False, "weights": [0.013791195446700209, -0.0008793607667484802, 0.0, 0.04213102030268145, 0.006823453107172214, -0.047705553103111205, -0.10949332032069149, -0.05948454885608203, 0.051430651774015235, 0.14526221996818256, 0.039328457872967966, -0.051651885029914, 0.17384723436394667, 0.013949860237858875, 0.10729026116651363, 0.018864930262616576, 0.00021454741057550138, -0.01515015587575183, 0.0, 0.01582004380524384, 0.03132527121350729, 0.007202996205768606, -0.08005516133073677, -0.015736215067182466, 0.04588502768576666, 0.09999019007765084, -0.13695241171007547, -0.06656612335607641, 0.11068172719953762, 0.006752999813914795, 0.03491718473720648, 0.012158064239678466, -0.05980822631432968, 0.023916210774899416, 0.0, -0.01196012952642699, -0.005213679557074864, 0.014302263448531945, 0.11136079453366678, -0.010989387933380675, -0.14318421722552044, -0.018066857628311048, 0.0722100106526805, -0.03909930680280547, -0.05928732392988395, 0.003661989027199033, -0.12472636115030472, 0.00996239029631116, -0.033521127169908675, -0.005871111529669588, -0.005871111529669588, -0.005871111531674846, 0.0, -0.010982256096733999, -0.015860801360188137, -0.014684181946869953, 0.07063889353328089, 0.009315644450350984, 0.013300339919661017, 0.014357648675532391, -0.032297151161665774, -0.013282116886838828, -0.010953343670985395, -0.010955580346375773, 0.03762838071816936, -0.01809056995223712, -0.018062650430317906, -0.017913416884687342, -0.03738004999431076, -0.039104076157781734, -0.03910407613995342, -0.0390430966420033, 0.06790245521502838, 0.0036593566517357317, 0.0036593566507487066, 0.0036646342684492337, 0.04461523589629414, 0.009961947729200062, 0.009961947727511264, 0.009956376685634821, -0.022755369106127254, 0.022357715732791106, 0.022357715732791106, 0.0223577157303425, 0.0, -0.018903043576506576, -0.021199512692659135, -0.016947429047222934, 0.046926405158066085, 0.014419217723773577, 0.01586914598440701, 0.013380493108570785, -0.00784726657001382, -0.011028081640098547, -0.00800038108402294, -0.011131768490215493, 0.07879385654193248, -0.01806265045059841, -0.017999323675195557, -0.018051231136950383, 0.01208647101114559, -0.039104076165406614, -0.03910407614761303, -0.039069355466442524, 0.09593497231868531, 0.0036593566521573597, 0.0036593566511714743, 0.003688795856772137, -0.09279667498557971, 0.00996194772992645, 0.00996194772823943, 0.009969189864224964, -0.006146356211558129]}]}

def serialize_logreg(model):
    # self.learning_rate = learning_rate  # learning_rate of the algorithm
    # self.num_iter = num_iter  #  number of iterations of the gradient descent
    # self.fit_intercept = fit_intercept  # boolean indicating whether we`re adding base X0 feature vector or not
    # self.verbose = verbose 
    # self._weights
    serialized_model = {
        'learning_rate':model.learning_rate,
        'num_iter':model.num_iter,
        'fit_intercept':model.fit_intercept,
        'verbose':model.verbose,
        'weights':model._weights.tolist()
    }
    return serialized_model

def deserialize_logreg(model_dict):
    deserialized_model = LogisticRegression()
    deserialized_model.learning_rate = model_dict['learning_rate']
    deserialized_model.num_iter = model_dict['num_iter']
    deserialized_model.fit_intercept = model_dict['fit_intercept']
    deserialized_model.verbose = model_dict['verbose']
    deserialized_model._weights = np.array(model_dict['weights'])
    return deserialized_model

class LogisticRegression:
    def __init__(self, learning_rate=0.01, num_iter=100, fit_intercept=True, verbose=False):
        self.learning_rate = learning_rate  # learning_rate of the algorithm
        self.num_iter = num_iter  #  number of iterations of the gradient descent
        self.fit_intercept = fit_intercept  # boolean indicating whether we`re adding base X0 feature vector or not
        self.verbose = verbose 
        self.firsttime = True 

    def _add_intercept(self, X):
        intercept = np.ones((X.shape[0], 1))  #  creating X0 features vector(M x 1)
        return np.concatenate((intercept, X), axis=1)  # concatenating X0 features vector with our features making intercept

    def _sigmoid(self, z):
        '''Defines our "logit" function based on which we make predictions
           parameters:
              z - product of the out features with weights
           return:
              probability of the attachment to class
        '''

        return 1 / (1 + np.exp(-z))

    def _loss(self, h, y):
        '''
        Functions have parameters or weights and we want to find the best values for them.
        To start we pick random values and we need a way to measure how well the algorithm performs using those random weights.
        That measure is computed using the loss function
        '''

        return (-y * np.log(h) - (1 - y) * np.log(1 - h)).mean()

    def get_params(self):
        return self._weights
    
    def load_params(self, params):
        self._weights = params

    def train(self, X, y):
        '''
        Function for training the algorithm.
            parameters:
              X - input data matrix (all our features without target variable)
              y - target variable vector (1/0)
            
            return:
              None
        '''

        if type(X) == pd.DataFrame:
            X = np.asarray(X)

        if self.fit_intercept:
            X = self._add_intercept(X)  # X will get a result with "zero" feature

        if self.firsttime:
            self._weights = np.zeros(X.shape[1])  #  inicializing our weights vector filled with zeros
            self.firsttime = False

        for i in range(self.num_iter):  # implementing Gradient Descent algorithm
            z = np.dot(X, self._weights)  #  calculate the product of the weights and predictor matrix
            h = self._sigmoid(z)
            gradient = np.dot(X.T, (h - y)) / y.size
            self._weights -= self.learning_rate * gradient
            
            if (self.verbose == True and i % 10000 == 0):
                z = np.dot(X, self._weights)
                h = self._sigmoid(z)
                print(f'loss: {self._loss(h, y)} \t')

    def predict_prob(self, X):
        if type(X) == pd.DataFrame:
            X = np.asarray(X)

        if self.fit_intercept:
            X = self._add_intercept(X)
    
        return self._sigmoid(np.dot(X, self._weights))
    
    def predict(self, X, threshold=0.5):
        if type(X) == pd.DataFrame:
            X = np.asarray(X)

        return self.predict_prob(X) >= threshold
    
    def eval(self, X, y):
        """"Evaluate accuracy on dataset."""
        p = self.predict(X)
        return np.sum(p == y) / X.shape[0]
    
class Indicator:
    def __init__(self, windows, product):
        self.obnames = [
            # 'bid_means',
            # 'ask_means',
            'bid_volumes',
            'ask_volumes',
            'mid_prices',
            # 'volume_diffs',
            'best_bids',
            'best_asks'
        ]
        self.product = product
        self.mw = max(windows)
        self.windows = windows
        self.curr_len = 0
        self.cache = {
            name:[] for name in self.obnames
        }

    def add_newstate(self, d):
        bids = []
        buytotal = 0
        buyvolume = 0
        for p, v in d.order_depths[self.product].buy_orders.items():
            if not np.isnan(p):
                bids.append(p)
                buytotal += p*v
                buyvolume += v
        asks = []
        selltotal = 0
        sellvolume = 0
        for p, v in d.order_depths[self.product].sell_orders.items():
            if not np.isnan(p):
                asks.append(p)
                selltotal += p*v
                sellvolume += v
        
        mid_price = (buytotal/buyvolume + selltotal/sellvolume)/2

        self.curr_len += 1
        # self.cache['bid_means'].append(buytotal/buyvolume)
        # self.cache['ask_means'].append(selltotal/sellvolume)
        self.cache['bid_volumes'].append(buyvolume)
        self.cache['ask_volumes'].append(sellvolume)
        self.cache['mid_prices'].append(mid_price)
        # self.cache['volume_diffs'].append(buyvolume-sellvolume)
        self.cache['best_bids'].append(max(bids))
        self.cache['best_asks'].append(min(asks))

        if self.curr_len > self.mw:
            self.curr_len -= 1
            # self.cache['bid_means'].pop(0)
            # self.cache['ask_means'].pop(0)
            self.cache['bid_volumes'].pop(0)
            self.cache['ask_volumes'].pop(0)
            self.cache['mid_prices'].pop(0)
            # self.cache['volume_diffs'].pop(0)
            self.cache['best_bids'].pop(0)
            self.cache['best_asks'].pop(0)
    
    def indicator(self, key):
        ret = []
        for wi in self.windows:
            wind = []
            if 'best' in key:
                curr = [0,0,0,0]
            else:
                curr = [0,0]
            if self.curr_len >= wi:
                ds = self.cache[key][-wi:]
                if 'best' in key:
                    try:
                        wind.append(max(ds))
                    except:
                        wind.append(0)
                    try:
                        wind.append(min(ds))
                    except:
                        wind.append(0)
                # try:
                #     wind.append(s.fmean(ds))
                # except:
                #     wind.append(0)
                try:
                    wind.append(s.geometric_mean(ds))
                except:
                    wind.append(0)
                try:
                    wind.append(s.stdev(ds))
                except:
                    wind.append(0)
                curr = wind
            ret.extend(curr)
        return ret
    
    def compute_single(self, states):
        ret = []
        self.add_newstate(states[-1][1])
        for ob in self.obnames:
            ret.extend(self.indicator(ob))
        return ret
    
class Trader:
    def __init__(self):
        self.states = []
        self.products = ["BANANAS", "PEARLS"]
        self.windows = [3**i for i in range(8)]
        self.clfs = {product:{} for product in self.products}
        self.indicators = {}
        self.inventory = {}
        self.pos_limit = 20

        for product in self.products:
            self.inventory[product] = {
                "position":0,
                "lifo":[]
            }
            self.indicators[product] = Indicator(self.windows, product)
            self.clfs['logregs'] = [
                deserialize_logreg(model_dict) for model_dict in logreg_hardcode[product]
            ]
        
    def run(self, state: TradingState) -> Dict[str, List[Order]]:
        """
        Only method required. It takes all buy and sell orders for all symbols as an input,
        and outputs a list of orders to be sent
        """
        # Initialize the method output dict as an empty dict
        result = {}
        self.states.append(state)

        # Iterate over all the keys (the available products) contained in the order depths
        for product in self.products:
            x = np.array(self.indicators[product].compute_single(self.states))
            preds = [clf.predict(x) for clf in self.clfs[product]['logregs']]

            orders = []
            position = self.inventory[product]['position']
            lifo = self.inventory[product]['lifo']

            # Unravel the position if possible
            if position != 0:
                positive = position > 0
                sorted(lifo)
                if not positive:
                    sorted(lifo, reverse=True)
                order_depth = state.order_depths[product]
                unravel = order_depth.buy_orders if positive else order_depth.sell_orders
                for p, v in enumerate(unravel):
                    vol = 0
                    for i in range(v):
                        if position == 0:
                            break
                        if lifo[0] < p and positive:
                            vol += 1
                            lifo.pop(0)
                            position -= 1
                        if lifo[0] > p and not positive:
                            vol += 1
                            lifo.pop(0)
                            position += 1
                    if vol > 0:
                        orders.append(Order(product, p, -vol))

            # Save the new positions and prices
            self.inventory[product]['position'] = position
            self.inventory[product]['lifo'] = lifo

            # Buy a new position if needed
            neutral = True if preds[8] == 1 else False
            buy_signal = np.sum(preds[:4])
            short_signal = np.sum(preds[4:8])
            trade = buy_signal - short_signal

            # Can only buy if position is buy already
            if trade > 0 and position >= 0:
                # The best ask to buy
                best_ask = min(order_depth.sell_orders.keys())

                # Compute the allowed volume
                vol = max(trade - (2 if neutral else 0), 0)
                best_ask_volume = order_depth.sell_orders[best_ask]
                actual_vol = min(vol, -best_ask_volume)
                actual_vol = min(self.pos_limit - position, actual_vol)

                # Create the order and store the values
                orders.append(Order(product, best_ask, actual_vol))
                self.inventory[product]['position'] += actual_vol
                self.inventory[product]['lifo'].extend([best_ask]*actual_vol)
            
            # Can only short if position is short already
            if trade < 0 and position <= 0:
                # The best price to sell 
                best_bid = max(order_depth.buy_orders.keys())

                # Compute the allowed volume
                vol = min(trade + (2 if neutral else 0), 0)
                best_bid_volume = order_depth.buy_orders[best_ask]
                actual_vol = max(vol, -best_bid_volume)
                actual_vol = max(-self.pos_limit - position, actual_vol)

                # Create the order and store the values
                orders.append(Order(product, best_bid, actual_vol))
                self.inventory[product]['position'] -= actual_vol
                self.inventory[product]['lifo'].extend([best_ask]*actual_vol)
            
            # Save the orders in the result accordingly
            result[product] = orders
        return result